using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.ServiceModel;
using System.Threading;
using Stt.Derivatives.Api;
using AvventoWebService.DataContracts;
using System.ServiceModel.Activation;
using System.Text;
using System.Timers;
using AvventoAPILibrary;
using AvventoWebService.Helpers;
using AvventoWebService.Properties;
using System.Xml;
using System.Xml.Linq;
using Stt.Derivatives.Api.Constants;
using log4net;


namespace AvventoWebService
{
    /// <summary>This class is used to handle all trading related interaction with the  MITS</summary>
    /// <seealso cref="AvventoWebService.IAvventoService" />
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    [ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Single, InstanceContextMode = InstanceContextMode.PerSession)]
    [SvcErrorHandlerBehaviour(typeof(SvcErrorHandler))]
    public class AvventoService : IAvventoService
    {

        private static readonly ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        #region member variables

        public static string xmlSchemadataDownload;
        public static string xmlSchemaSubmitOrder;
        public static string xmlSchemaSuspendActiveOrder;
        public static string xmlSchemaDeleteActiveOrder;
        public static string xmlSchemaDeleteSuspendedOrder;
        public static string xmlSchemaResubmitSuspendedOrder;
        public static string xmlSchemaReduceOrderQuantity;
        public static string xmlSchemaCancelAllOrders;
        public static string xmlSchemaEditSuspendedOrder;
        public static string xmlSchemaEditActiveOrderById;
        public static string xmlSchemaDeleteSuspended;

        public static string xmlSchemaSubmitBulkOrder;
        public static string xmlSchemaInstrumentSubscription;
        public static string xmlSchemaIndicesSubscription;



        public int waitTime;
        public int retry;
        public bool useModelValidation;

        public List<InstrumentStructure> InstrumentData;
        public List<DisplayStructure> DisplayData;

        public Dictionary<string, string> clientDataDic;
        public Dictionary<string, string> InstrumentDataDic;
        private bool anotherSetOfClientDataToCome = true;
        private bool ClientDataToComeTriggered = false;
        private bool anotherSetOfActiveOrderToCome = true;
        // private bool anotherSetOfInstDataToCome = true;


        private int MarketNumber;
        private int MaxRecordCount = 0;
        private string userName;
        public static string orderRejectionMessage;

        private QueryAction queryAction;
        private bool orderUpdateReceived = false;
        bool dataDownloadTriggered = false;
        string xmlresponse = null;


        public ActionResponse actionResult;
        private bool updateRecieved = false;

        private AvventoAPI avventoApi;
        private SessionManager session;


        #endregion
        /// <summary>Prevents a default instance of the <see cref="AvventoService"/> class from being created.</summary>
        /// <autogeneratedoc />
        public AvventoService()
        {

            this.MarketNumber = Properties.Settings.Default.MarketNumber;

            ValidateConfig();
            GetXmlSchemas();

        }

        #region Interface Operations

        /// <summary>Logins the specified user name.</summary>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="password">The password.</param>
        /// <returns></returns>
        /// <exception cref="FaultException">Error on Login Action: " + exp.Message</exception>
        /// <autogeneratedoc />
        public string Login(string UserName, string password)
        {
            //throw new Exception();

            ActionResponse actionReponse = new ActionResponse();
            try
            {

                session = new SessionManager();
                avventoApi = new AvventoAPI(session);
                InitializeCallBacks(avventoApi, session, UserName, password);
                avventoApi.ConnectToMarket(Properties.Settings.Default.ProxyIPAddress, Convert.ToInt32(Settings.Default.ProxyPort));


                if (session.IsConnected)
                {
                    // InitializeCallBacks(avventoApi, session, UserName, password);

                    int cnt = 0;
                    while (!session.IsLoggedIn && cnt < 20)
                    {
                        Thread.Sleep(20);
                        cnt++;
                    }

                    userName = UserName;
                    if (session.IsLoggedIn)
                    {
                        avventoApi.SendFileDownloadMessage(FileIdentifier.Instruments, UserName, false, DateTime.Today);
                        avventoApi.SendFileDownloadMessage(FileIdentifier.Display, UserName, false, DateTime.Today);
                        avventoApi.SendFileDownloadMessage(FileIdentifier.Client, UserName, false, DateTime.Today);
                        actionReponse.ResponseCode = "0";
                        actionReponse.Message = "Success";
                        actionReponse.Reason = session.IsLoggedIn ? "" : "Unable to Connect. Please Contact System Administrator.";
                        Thread.Sleep(9000);
                        if (ClientDataToComeTriggered == true)
                        {
                            while (anotherSetOfClientDataToCome)
                            {
                                Thread.Sleep(10);

                            }
                        }
                        else
                        {

                            log.Warn(string.Format("User Logged in But No Client Data Not Triggerred after {0} seconds", 9));

                            /*
                            actionReponse.ResponseCode = "522";
                            actionReponse.Message = "No Client Data Available";
                            actionReponse.Reason ="Login Terminated Unable to Connect. Please retry or contact System Administrator.";
                            return actionReponse.ToString();
                            */
                        }

                        log.Info(string.Format("{0} Records written for Client Data", Cache.concurrentClientDataKeyClientCode.Count));

                    }
                    else
                    {
                        actionReponse.ResponseCode = "500";
                        actionReponse.Message = "Logon Failed";
                        actionReponse.Reason = session.IsLoggedIn ? "" : "Unable to Connect. Please Contact System Administrator or try again.";

                    }
                }
                else
                {
                    actionReponse.ResponseCode = "521";
                    actionReponse.Message = "JSE Market Connection Failed";
                    actionReponse.Reason = session.IsLoggedIn ? "" : "Unable to Connect. Please Contact System Administrator or try again.";
                }

                return actionReponse.ToString();
            }

            catch (Exception exp)
            {
                log.Error("Error on Login Action: ", exp);
                throw new FaultException("Error on Login Action: ");

            }
        }


        /// <summary>Submits the action.</summary>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public string SubmitAction(string actionQuery)
        {
            log.Info(string.Format("User: {0} Data Dwonload Action Query: {1}\r\n", userName, actionQuery));
            ActionResponse actionResponse = new ActionResponse();
            actionResult = null;

            bool modelValid = false;

            try
            {
                XElement xmlquery = null;
                try
                {
                    xmlquery = XElement.Parse(actionQuery);

                }
                catch (Exception exp)
                {

                    actionResponse.Message = "Invalid Supplied XML String";
                    actionResponse.ResponseCode = "501";
                    actionResponse.Reason = string.Format("Error on Submit Action: {0}", string.Format(exp.Message));

                    return actionResponse.ToString();
                }

                if (xmlquery.FirstNode.Parent != null)
                {
                    if (!xmlquery.FirstNode.Parent.ToString().ToUpper().StartsWith("<QUERY>"))
                    {
                        actionResponse.Message = "Invalid Supplied Xml String";
                        actionResponse.ResponseCode = "502";
                        actionResponse.Reason = "Root Node '<Query>' is missing";
                        return actionResponse.ToString();
                    }



                    if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<SUBMITORDERS>"))
                    {
                        var elements = xmlquery.Elements("SubmitOrders")//Elements("Order")
                          .Elements()
                          .ToList();

                        List<SubmitOrderStructure> submitOrderStructureList = new List<SubmitOrderStructure>();
                        SubmitOrderStructure submitOrderStructure = new SubmitOrderStructure();
                        foreach (var element in elements)
                        {

                            SubmitOrderStructure order = HelperMethods.ParseXml<SubmitOrderStructure>(submitOrderStructure, element, QueryAction.SubmitBulkOrder);
                            submitOrderStructureList.Add(order);
                        }

                        SubmitBulkOrderStructure submitBulkOrderData = new SubmitBulkOrderStructure();
                        submitBulkOrderData.OrdersList = submitOrderStructureList;
                        List<BulkOrderActionResponse> bulkOrderActionResponse = ProcessSubmitBulkOrderAction(submitBulkOrderData, actionQuery, "SUBMIT BULK ORDER");
                        return bulkOrderActionResponse.ToString();
                    }
                    if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<SUBMITORDER>"))
                    {
                        SubmitOrderStructure classStructure = new SubmitOrderStructure();
                        SubmitOrderStructure submitOrderStructure = HelperMethods.ParseXml<SubmitOrderStructure>(classStructure, xmlquery, QueryAction.SubmitActiveOrder);
                        actionResponse = ProcessSubmitOrderAction(submitOrderStructure, actionQuery, "SUBMIT ORDER");
                    }
                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<EDITACTIVEORDER>"))
                    {
                        EditActiveOrderStructure template = new EditActiveOrderStructure();
                        EditActiveOrderStructure editActiveOrderStructure = HelperMethods.ParseXml<EditActiveOrderStructure>(template, xmlquery, QueryAction.EditActiveOrder);
                        actionResponse = ProcessEditActiveOrderAction(editActiveOrderStructure, actionQuery, "EDIT ACTIVE ORDER");
                    }
                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<DELETEACTIVEORDER>"))
                    {
                        DeleteOrderStructure template = new DeleteOrderStructure();
                        DeleteOrderStructure deleteOrderStructure = HelperMethods.ParseXml<DeleteOrderStructure>(template, xmlquery, QueryAction.DeleteActiveOrder);
                        actionResponse = ProcessDeleteOrderAction(deleteOrderStructure, actionQuery, "DELETE ORDER");

                    }
                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<REDUCEORDERQUANTITY>"))
                    {
                        ReduceOrderStructure template = new ReduceOrderStructure();
                        ReduceOrderStructure reduceOrderStructure = HelperMethods.ParseXml<ReduceOrderStructure>(template, xmlquery, QueryAction.ReduceOrderQuantity);
                        actionResponse = ProcessReduceOrderQuantityAction(reduceOrderStructure, actionQuery, "REDUCE ORDER QUANTITY");
                    }

                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<SUSPENDACTIVEORDER>"))
                    {
                        CancelOrSuspendOrderStructure template = new CancelOrSuspendOrderStructure();
                        CancelOrSuspendOrderStructure cancelOrSuspendOrderStructure = HelperMethods.ParseXml<CancelOrSuspendOrderStructure>(template, xmlquery, QueryAction.SuspendActiveOrder);
                        actionResponse = ProcessSuspendActiveOrderAction(cancelOrSuspendOrderStructure, actionQuery, "SUSPEND ACTIVE ORDER");

                    }

                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<EDITSUSPENDEDORDER>"))
                    {
                        EditSuspendedOrderStructure template = new EditSuspendedOrderStructure();
                        EditSuspendedOrderStructure editSuspendedOrderStructure = HelperMethods.ParseXml<EditSuspendedOrderStructure>(template, xmlquery, QueryAction.EditSuspendedOrder);
                        actionResponse = ProcessEditSuspendedOrderAction(editSuspendedOrderStructure, actionQuery, "EDIT SUSPENDED ORDER");
                    }
                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<RESUBMITSUSPENDEDORDER>"))
                    {
                        ResubmitOrderStructure template = new ResubmitOrderStructure();
                        ResubmitOrderStructure resubmitOrderStructure = HelperMethods.ParseXml<ResubmitOrderStructure>(template, xmlquery, QueryAction.ResubmitSuspendedOrder);
                        actionResponse = ProcessResubmitSuspendedOrderAction(resubmitOrderStructure, actionQuery, "RESUBMIT SUSPENDED ORDER");
                    }

                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<CANCELALLORDERS>"))
                    {
                        CancelAllOrdersStructure template = new CancelAllOrdersStructure();
                        CancelAllOrdersStructure cancelAllOrdersParam = HelperMethods.ParseXml<CancelAllOrdersStructure>(template, xmlquery, QueryAction.CancelAllOrders);
                        actionResponse = ProcessCancelAllOrdersAction(cancelAllOrdersParam, actionQuery, "CANCEL ALL ORDERS");

                    }
                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<INSTRUMENTSUBSCRIPTION>"))
                    {
                        InstrumentSubscriptionStructure template = new InstrumentSubscriptionStructure();
                        InstrumentSubscriptionStructure inputparam = HelperMethods.ParseXml<InstrumentSubscriptionStructure>(template, xmlquery, QueryAction.InstrumentSubscription);
                        actionResponse = ProcessInstrumentSubscription(inputparam);
                    }
                    else if (xmlquery.FirstNode.ToString().ToUpper().StartsWith("<INDICESSUBSCRIPTION>"))
                    {
                        IndicesSubscriptionStructure template = new IndicesSubscriptionStructure();
                        IndicesSubscriptionStructure inputparam = HelperMethods.ParseXml<IndicesSubscriptionStructure>(template, xmlquery, QueryAction.IndicesSubscription);
                        actionResponse = ProcessIndicesSubscription(inputparam);

                    }

                    else
                    {
                        //Invalid Action //Please review query
                        actionResponse.Message = "Invalid Action";
                        actionResponse.ResponseCode = "504";
                        actionResponse.Reason = string.Format("There is no definition for the supplied action  : {0} ", xmlquery.FirstNode.ToString());

                    }

                }
                if (actionResponse == null)
                {
                    actionResponse = new ActionResponse();
                    actionResponse.ResponseCode = "512";
                    actionResponse.Reason = "Operation Failed or timeout";
                    actionResponse.Message = "Download active orders to verified operation Status.";
                    return actionResponse.ToString();
                }
                return actionResponse.ToString();
            }
            catch (Exception exp)
            {
                log.Error(string.Format("Error On Submit Action:", exp));
                throw new FaultException(string.Format("Error On Submit Action: {0}", exp.Message));
            }
        }


        public string Version()
        {
            ServiceInfo serviceInfo = new ServiceInfo();
            serviceInfo.Title = AssemblyInfoHelper.Title;
            serviceInfo.Product = AssemblyInfoHelper.Product;
            serviceInfo.Company = AssemblyInfoHelper.Company;
            serviceInfo.Description = AssemblyInfoHelper.Description;
            serviceInfo.Version = AssemblyInfoHelper.VersionFull;
            return HelperMethods.Serialize<ServiceInfo>(serviceInfo);

        }


        /// <summary>Datasets the download.</summary>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <exception cref="FaultException"></exception>
        /// <autogeneratedoc />
        public byte[] DatasetDownload(string actionQuery)
        {
            log.Info(string.Format("User: {0} Submit Action Query: {1}\r\n", userName, actionQuery));

            bool validSchema = false;
            string message = null;
            ActionResponse actionResponse = new ActionResponse();
            int cnt = 0;
            bool historicalRetrieval = false;
            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemadataDownload, out message);

            if (!validSchema)
            {
                actionResponse.Message = "Invalid Supplied Xml String";
                actionResponse.ResponseCode = "501";
                actionResponse.Reason = message;
                return HelperMethods.SerializeToByteArray<ActionResponse>(actionResponse);
            }

            try
            {

                byte[] xml = null;

                XElement xmlquery = null;

                try
                {
                    xmlquery = XElement.Parse(actionQuery);

                }
                catch (Exception exp)
                {
                    //Log Exp

                    actionResponse.Message = "Invalid Supplied Xml String";
                    actionResponse.ResponseCode = "501";
                    actionResponse.Reason = string.Format("Error On Data Download: {0}", exp.Message);
                    return HelperMethods.SerializeToByteArray<ActionResponse>(actionResponse);
                }


                DataDownloadStructure template = new DataDownloadStructure();
                DataDownloadStructure inputparam = HelperMethods.ParseXml<DataDownloadStructure>(template,
                    xmlquery,
                    QueryAction.DataDownload);

                if (inputparam == null)
                {
                    actionResponse.ResponseCode = "503";
                    actionResponse.Message = string.Format("Action: {0}  has invlaid or empty information",
                        xmlquery.FirstNode.ToString());
                    actionResponse.Reason = "Xml string contains missing values for some elements";

                    return HelperMethods.SerializeToByteArray<ActionResponse>(actionResponse);
                }

                int datatype = 0;

                if (!(string.IsNullOrEmpty(inputparam.DataType.Trim()) ||
                      Int32.TryParse(inputparam.DataType.Trim(), out datatype) ||
                      inputparam.DataType.Trim() == "0"))
                {
                    datatype = Int32.Parse(inputparam.DataType.Trim());
                }



                DateTime startDate = DateTime.MinValue;
                DateTime endDate = DateTime.MaxValue;
                int specificRecords = 0;


                if (DateTime.TryParse(inputparam.StartDate, out startDate))
                {
                    startDate = DateTime.Parse(inputparam.StartDate);
                }

                if (DateTime.TryParse(inputparam.EndDate, out endDate))
                {
                    startDate = DateTime.Parse(inputparam.EndDate);
                }

                //Date must be valid for DataTypes that is Marked as Historical Recieval

                string[] historicalDataset = null;

                if (Properties.Settings.Default.DatasetForHistoricalDataRetrieval.Contains(","))
                {
                    historicalDataset = Properties.Settings.Default.DatasetForHistoricalDataRetrieval.Split(',');
                }

                if (historicalDataset != null &&
                    (historicalDataset.Any() && historicalDataset.Contains(datatype.ToString())))
                {
                    if (startDate.CompareTo(DateTime.MinValue) == 0)
                    {
                        actionResponse = new ActionResponse();
                        actionResponse.ResponseCode = "505";
                        actionResponse.Message = "The Dataset requires a Start Date";
                        actionResponse.Reason = "Start Date must be specified for dataset that supports historical retrieval";
                        return HelperMethods.SerializeToByteArray<ActionResponse>(actionResponse);
                    }

                    specificRecords = 0;
                    historicalRetrieval = true;
                }

                //Change to Accept Both Start Date and End Date

                string xmlstring = DownloadDatasetHandler((short)datatype, reRequest: false, startDate: startDate, endDate: endDate, specificRecord: specificRecords, historicalRetreival: historicalRetrieval);

                // LogUtility.LogEventInformation(xmlstring);



                //check if null
                if (!string.IsNullOrEmpty(xmlstring))
                {
                    xml = HelperMethods.CompressNoLength(xmlstring);
                }
                else
                {
                    actionResponse.ResponseCode = "510";
                    actionResponse.Message = string.Format("No Data Retrieved for Data Type: {0}", datatype);
                    actionResponse.Reason = "No data is all available for the specified criteria.";

                    var bytearr = HelperMethods.SerializeToByteArray<ActionResponse>(actionResponse);
                    return bytearr;


                }



                return xml;
            }

            catch (Exception exp)
            {
                log.Error("Error On Dataset Download Action:", exp);
                throw new FaultException(string.Format("Error On Submit Action: {0}", exp.Message));
            }
        }

        /// <summary>Logouts the specified user name.</summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        public void Logout()
        {
            try
            {
                avventoApi.SendLogoutMessage(userName);
                log.Info(string.Format("User: {0} has succesfully Logout out", userName));
            }
            catch (Exception exp)
            {
                log.Error(string.Format("There was an error while Logging out User: {0}", userName));
            }




            // return HelperMethods.Serialize<ActionResponse>(actionResponse);
        }

        #endregion


        #region Intialization and Setups
        public void InitializeCallBacks(AvventoAPI _avventoApi, SessionManager session, string UserName, string Password)
        {
            // session.IsConnected = false;


            _avventoApi.InternalEvents.APIRAWMessageReceived += des =>
            {
                Cache.AuditIncomingMessages.Add(des);
            };

            _avventoApi.InternalEvents.APIMessageSent += (messageType, messageStruct) =>
            {
                Cache.AuditOutgoingMessages.Add(Tuple.Create(messageType, messageStruct));
            };

            _avventoApi.IncomingMessages.ReceivedErrorCallback = s =>
            {

                ActionResponse actResponse = new ActionResponse();
                actResponse.ResponseCode = "513";
                actResponse.Message = s;
                if (s.ToString().ToUpper().Contains("NEW CONNECTION ON SOCKET"))
                {
                    log.Info(s);

                }
                else
                {
                    log.Error(s);
                }
            };

            _avventoApi.InternalEvents.NewConnection += (client, socket) =>
            {

                session.IsConnected = true;
                _avventoApi.IncomingMessages.ReceivedErrorCallback(string.Format("New Connection on Socket: {0} for User: {1}", socket, UserName));
            };

            _avventoApi.InternalEvents.DisconnectHandler += (remoteEndPoint, exception) =>
            {
                session.IsConnected = false;
                session.IsLoggedIn = false;
                log.Error(string.Format("User: {0} Disconnected from {1} due to {2}", UserName, remoteEndPoint, exception));
            };

            _avventoApi.InternalEvents.SocketErrorHandler += (IpEndPoint, exception) =>
            {
                session.IsConnected = false;
                _avventoApi.IncomingMessages.ReceivedErrorCallback(string.Format("User: {0} Error from Connection:  {1} message {2}", UserName, IpEndPoint, exception));
            };

            _avventoApi.IncomingMessages.EncryptionKey = (details, key) =>
            {
                _avventoApi.SendLoginMessage(UserName, Password, key);
            };

            _avventoApi.IncomingMessages.ReceivedLoginReplyCallback = (loginreply) =>
            {
                if (loginreply.IsSuccessful)
                {
                    log.Info(string.Format("Login succeed for User: {0}", UserName));

                    session.IsLoggedIn = true;
                }
                else
                {
                    log.Info(string.Format("Login failed for User: {0}", UserName));
                    session.IsLoggedIn = false;
                }

            };

            _avventoApi.IncomingMessages.ReceivedHeartbeatCallback = delegate
            {
                log.Info(string.Format("Received heartbeat from server User: {0}", UserName));
                log.Info(string.Format("User: {0} Sending heartbeat", UserName));
                _avventoApi.SendHeartBeat(UserName);
            };

            _avventoApi.FileDownloads.ReceivedDisplayCallback = (display, action, anotherSetToCome) =>
            {

                DisplayData = display;

            };

            _avventoApi.FileDownloads.ReceivedFileUpdatesCallback = (des, downloaded) =>
            {
                orderUpdateReceived = false;
                ActionResponse actResponse = new ActionResponse();

                switch (queryAction)
                {
                    case QueryAction.SubmitActiveOrder:
                        {
                            orderUpdateReceived = true;
                            break;
                        }
                    case QueryAction.EditActiveOrder:
                        {
                            orderUpdateReceived = true;
                            break;
                        }


                    case QueryAction.ReduceOrderQuantity:
                        {
                            orderUpdateReceived = true;
                            break;
                        }
                    case QueryAction.SuspendActiveOrder:
                        {
                            orderUpdateReceived = true;
                            break;
                        }
                    case QueryAction.EditSuspendedOrder:
                        {
                            orderUpdateReceived = true;
                            break;
                        }
                    case QueryAction.ResubmitSuspendedOrder:
                        {
                            orderUpdateReceived = true;
                            break;
                        }
                    case QueryAction.DeleteActiveOrder:
                        {
                            orderUpdateReceived = true;
                            break;
                        }
                    default:
                        {
                            orderUpdateReceived = false;
                            break;
                        }
                }

                if (orderUpdateReceived)
                {
                    /*
                    actResponse.ResponseCode = "0";
                    actResponse.Message = "Success";
                    actionResult = actResponse;
                    */


                }
                else
                {
                    // actionResult.ResponseCode = "0";
                    // actionResult.Message = "Failed";
                    //actionResult = actResponse;
                }


            };

            _avventoApi.FileDownloads.ReceivedInstrumentCallBack = (instruments, action, anotherSetToCome) =>
            {
                InstrumentData = instruments;
                foreach (var instrument in instruments)
                {

                    string InstrumentCode = HelperMethods.ParsePascal(instrument.DisplayName).ToUpper();
                    if (!string.IsNullOrEmpty(InstrumentCode))
                    {
                        string instrumentContract = HelperMethods.ParsePascal(instrument.Instrument).ToUpper();
                        Cache.Update(Cache.concurrentDicInstrumentDataKeyInstrumentCode, InstrumentCode, instrumentContract, action);
                        Cache.Update(Cache.concurrentDicInstrumentDataKeyInstrumentName, instrumentContract, InstrumentCode, action);
                    }
                }

            };

            _avventoApi.FileDownloads.ReceivedClientDataCallback = (cData, action, anotherSetToCome) =>
            {
                ClientDataToComeTriggered = true;
                anotherSetOfClientDataToCome = anotherSetToCome;

                foreach (var item in cData)
                {
                    string accountNumber = HelperMethods.ParsePascal(item.StrateCode).Trim();
                    string clientCode = HelperMethods.ParsePascal(item.ClientCode).Trim();
                    Cache.Update(Cache.concurrentClientDataKeyClientCode, clientCode, accountNumber, action);
                    Cache.Update(Cache.concurrentClientDataKeyAccountNumber, accountNumber, clientCode, action);
                }

            };


            _avventoApi.FileDownloads.ReceivedMarketAnnouncementCallBack = (announcement, action) =>
            {
                string str = null;
                foreach (var anu in announcement)
                {
                    str += string.Format("Market announcement: {0}", Utilities.ConvertFromDelphiString(anu.Announcement));
                }
                log.Info(str);


            };

            _avventoApi.FileDownloads.ExchangeAnnouncement = (exchangeAnnouncement, action) =>
            {
                string str = string.Format("ErrorNumber {0} Message {1}", exchangeAnnouncement.MessageNumber, exchangeAnnouncement.Message);
                log.Info(string.Format("User: {0} \t {1}", UserName, str));

                Cache.Update(Cache.ExchangeAnnouncement, exchangeAnnouncement.MessageNumber, exchangeAnnouncement, action);
            };




            _avventoApi.FileDownloads.ReceivedDepthCallback = depth =>
            {
                var auction = (AuctionMode)depth.Header.Auction;
                var oddlot = depth.Header.OddLot == 0 ? "Normal" : (depth.Header.OddLot == 1 ? "Odd" : "AON");
                // log.Debug($"{"Contract",-10} {"Oddlot",-6} {"Auction",-9} {"High",9} {"Low",9} {"VWAP",9} {"Close",9} {"Status",-10}");
                // log.Debug($"{depth.Header.Contract.ToString(),-10} {oddlot,-6} {auction,-9} {depth.Header.HighPrice,9} {depth.Header.LowPrice,9} {depth.Header.VWAP,9} {depth.Header.ClosingPrice,9} {depth.Header.ContractStatus,-10}");
            };

            _avventoApi.IncomingMessages.ReceivedDisplayUpdateCallback = (depthelements) =>
            {
                foreach (var depthelement in depthelements)
                {
                    DisplayUpdate displayUpdate = new DisplayUpdate();
                    displayUpdate.IdStrike = depthelement.SellQuantity;

                    Cache.Update(Cache.concurrentDisplayUpdate, displayUpdate.IdContractDate, displayUpdate, ActionType.InsertOrUpdate);
                }

                ActionResponse actResponse = new ActionResponse();
                actResponse.ResponseCode = "0";
                actResponse.Message = depthelements.Count > 0 ? "Record Updated" : "Updated Failed";
                actionResult = actResponse;

                // updateRecieved = true;

            };

            _avventoApi.FileDownloads.RecievedActiveOrderCallback = (ao, action, anotherSetToCome) =>
            {

                ActionResponse actResponse = new ActionResponse();

                actResponse.ResponseCode = "0";

                switch (action)
                {

                    case ActionType.InsertOrUpdate:
                        {
                            actResponse.Message = "Success";
                            actResponse.Reason = "";
                        }
                        break;
                    case ActionType.Delete:
                        {
                            actResponse.Message = "Success";
                            actResponse.Reason = "Order Deleted";
                        }
                        break;

                    case ActionType.Update:
                        {
                            actResponse.Message = "Success";
                            actResponse.Reason = "Order Updated";
                        }
                        break;
                    case ActionType.Insert:
                        {
                            actResponse.Message = "Success";
                            actResponse.Reason = "Order Inserted";
                        }
                        break;

                }
                actionResult = actResponse;
            };



            _avventoApi.IncomingMessages.OrderReject = orderReject =>
            {

                ActionResponse actResponse = new ActionResponse();
                string message = string.Format("ErrorNumber: {0} Message {1} Order Reference {2}", orderReject.Error_Number, orderReject.Message, Utilities.ConvertFromDelphiString(orderReject.Order_Reference));
                log.Warn(message);
                actResponse.ResponseCode = orderReject.Error_Number.ToString();
                actResponse.Message = message;
                actResponse.Reason = "Order rejected due to a business rule validation";
                actionResult = actResponse;
            };

            _avventoApi.IncomingMessages.OrderCancelReject = ordercancelReject =>
            {
                string message = string.Format("ReferenceNumber: {0} Message: {1} Order Reference: {2}", HelperMethods.ParsePascal(ordercancelReject.ReferenceNumber), HelperMethods.ParsePascal(ordercancelReject.Message), Utilities.ConvertFromDelphiString(ordercancelReject.ReferenceNumber));

                ActionResponse actResponse = new ActionResponse();
                log.Warn(message);
                actResponse.ResponseCode = ordercancelReject.ReferenceNumber.ToString();
                actResponse.Message = message;
                actResponse.Reason = "Order Cancel Rejected due to a business rule validation";
                actionResult = actResponse;

            };

            _avventoApi.IncomingMessages.BusinessMessageReject = bmr =>
            {
                ActionResponse actResponse = new ActionResponse();
                string str = string.Format("ErrorNumber BMR Message {0}: Reference: {1} ", bmr.Message, Stt.Derivatives.Api.DataConverter.ConvertFromDelphiString(bmr.ReferenceMessage));
                actResponse = new ActionResponse();
                log.Warn(str);
                actResponse.ResponseCode = bmr.ReferenceSequenceNumber.ToString();
                actResponse.Message = str;
                actResponse.Reason = "Business Reject Rejection";
                actionResult = actResponse;
            };

            _avventoApi.IncomingMessages.ReceivedFailoverRecoveryAnnouncmentCallback = fail =>
            {
                string message = string.Format("Failover type: {0} \n Market: {1} \tShard: {2}", fail.FailoverNoticeNumber, fail.MarketNumber, fail.ShardNumber);
                log.Error(message);
            };



        }


        public void ValidateConfig()
        {
            int _waitTime;
            int _retry;
            bool _useModelValidation;

            waitTime = 500;
            retry = 100;
            useModelValidation = false;

            if (!string.IsNullOrEmpty(Properties.Settings.Default.WaitTime) &&
                Int32.TryParse(Properties.Settings.Default.WaitTime, out _waitTime))
            {
                waitTime = Convert.ToInt32(Properties.Settings.Default.WaitTime);
            }

            if (!string.IsNullOrEmpty(Properties.Settings.Default.WaitRetryAttempts) &&
                Int32.TryParse(Properties.Settings.Default.WaitRetryAttempts, out _retry))
            {
                retry = Convert.ToInt32(Properties.Settings.Default.WaitRetryAttempts);
            }
            if (!string.IsNullOrEmpty(Properties.Settings.Default.UseModelValidation) && bool.TryParse(Properties.Settings.Default.UseModelValidation, out _useModelValidation))
            {
                useModelValidation = Convert.ToBoolean(Properties.Settings.Default.UseModelValidation);

            }
            if (string.IsNullOrWhiteSpace(Properties.Settings.Default.MaxRecordCount) ||
                string.IsNullOrEmpty(Properties.Settings.Default.MaxRecordCount))
            {
                MaxRecordCount = 5000;
            }
            else
            {
                int intval = 0;
                if (Int32.TryParse(Properties.Settings.Default.MaxRecordCount, out intval))
                {
                    MaxRecordCount = Convert.ToInt32(Properties.Settings.Default.MaxRecordCount);

                }
                else
                {
                    MaxRecordCount = 5000;
                }
            }

        }

        public void GetXmlSchemas()
        {
            try
            {
                string basedir = System.Web.HttpContext.Current.Server.MapPath("~/bin/Files/Schema/");
                this.MarketNumber = Properties.Settings.Default.MarketNumber;
                xmlSchemadataDownload = System.IO.Path.Combine(basedir, Properties.Settings.Default.DownloadDataSchemaFile);
                xmlSchemaSubmitOrder = System.IO.Path.Combine(basedir, Properties.Settings.Default.SendOrderInsertSchemaFile);
                xmlSchemaSuspendActiveOrder = System.IO.Path.Combine(basedir, Properties.Settings.Default.SuspendActiveOrderSchemaFile);
                xmlSchemaDeleteActiveOrder = System.IO.Path.Combine(basedir, Properties.Settings.Default.DeleteActiveOrderSchemaFile);
                xmlSchemaReduceOrderQuantity = System.IO.Path.Combine(basedir, Properties.Settings.Default.ReduceOrderQuantitySchemaFile);
                xmlSchemaCancelAllOrders = System.IO.Path.Combine(basedir, Properties.Settings.Default.SendCancelAllOrdersSchemaFile);
                xmlSchemaEditSuspendedOrder = System.IO.Path.Combine(basedir, Properties.Settings.Default.EditSuspendedOrderSchemaFile);
                xmlSchemaEditActiveOrderById = System.IO.Path.Combine(basedir, Properties.Settings.Default.EditActiveOrderSchemaFile);
                xmlSchemaSubmitBulkOrder = System.IO.Path.Combine(basedir, Properties.Settings.Default.SubmitBulkOrderSchemaFile);
                xmlSchemaInstrumentSubscription = System.IO.Path.Combine(basedir, Properties.Settings.Default.InstrumentSubscriptionSchemaFile);
                xmlSchemaIndicesSubscription = System.IO.Path.Combine(basedir, Properties.Settings.Default.IndicesSubscriptionSchemaFile);


            }
            catch (Exception exp)
            {

                log.Error("Error on Login Action: ", exp);

            }

        }
        #endregion

        #region Wait Period Setup
        private void DisplayUpdateWait()
        {

            int i = 0;
            while ((orderUpdateReceived == false && i < (retry)) && actionResult == null)
            {
                Thread.Sleep(waitTime);
                i++;
            }
        }

        private bool DataAvailable()
        {
            /*
            int i = 0;
            while (actionResult == null && i < retry  * 2)
            {
                Thread.Sleep(this.waitTime);
                i++;
            }
            */
            int cnt = 0;
            while ((dataDownloadTriggered == false && cnt < (retry * 2)) && xmlresponse == null)
            {
                Thread.Sleep(waitTime);
                cnt++;
            }
            return false;
        }

        #endregion


        #region Trade Engine Interaction and Order Manipulation Operation



        /// <summary>Sends the active order.</summary>
        /// <param name="submitOrderStructure">The submit order structure.</param>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        public ActionResponse ProcessSubmitOrderAction(SubmitOrderStructure submitOrderStructure, string actionQuery, string actionName)

        {
            ActionResponse actionResponse = new ActionResponse();
            bool validSchema = false;
            bool modelValid = false;
            string message = null;
            string clientCode = null;
            queryAction = QueryAction.SubmitActiveOrder;
            orderUpdateReceived = false;


            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaSubmitOrder, out message);

            if (!validSchema)
            {
                actionResponse.Message = string.Format("Invalid XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                return actionResponse;

            }

            if (useModelValidation)
            {

                ValidationContext validationContext = new ValidationContext(submitOrderStructure);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(submitOrderStructure, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }


                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    return actionResponse;

                }
            }
            DateTime expiryDate = new DateTime();
            expiryDate = DateTime.MinValue;

            if (DateTime.TryParse(submitOrderStructure.ExpiryDate, out expiryDate))
            {
                expiryDate = Convert.ToDateTime(submitOrderStructure.ExpiryDate);
            }


            // avventoApi.SendFileDownloadMessage(FileIdentifier.Client, userName, false, DateTime.Now);

            var ordercontact = GetOrderContract(submitOrderStructure.InstrumentCode);

            if (string.IsNullOrEmpty(Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName)))
            {
                return InvalidInstrumentCodeResponse(submitOrderStructure.InstrumentCode);
            }
            clientCode = GetClientCode(submitOrderStructure.ClientCodeOrAccountNumber, submitOrderStructure.ClientAccountReference, out message);

            if (string.IsNullOrEmpty(clientCode))
            {
                return InvalidClientAccountNumber(message);
            }
            avventoApi.SendOrderInsert(ordercontact, clientCode.ToUpper(), submitOrderStructure.MemberCode.ToUpper(), submitOrderStructure.DealerCode.ToUpper(), submitOrderStructure.BuyOrSell[0], Convert.ToInt32(submitOrderStructure.Quantity), Convert.ToDouble(submitOrderStructure.Price), userName, Convert.ToInt32(submitOrderStructure.BidType), Convert.ToInt32(submitOrderStructure.CancelFlag), submitOrderStructure.OrderReference, 0, expiryDate);

            DisplayUpdateWait();

            return actionResult;
        }

        public List<BulkOrderActionResponse> ProcessSubmitBulkOrderAction(SubmitBulkOrderStructure submitBulkOrderStructure, string actionQuery, string actionName)
        {
            BulkOrderActionResponse actionResponse = new BulkOrderActionResponse();
            List<BulkOrderActionResponse> bulkOrderActionResponseList = new List<BulkOrderActionResponse>();

            bool validSchema = false;
            bool modelValid = false;
            string message = null;
            string clientCode = null;
            queryAction = QueryAction.SubmitBulkOrder;
            orderUpdateReceived = false;


            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaSubmitBulkOrder, out message);

            if (!validSchema)
            {
                actionResponse.Message = string.Format("Invalid XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                bulkOrderActionResponseList.Add(actionResponse);
                return bulkOrderActionResponseList;


            }

            if (useModelValidation)
            {

                ValidationContext validationContext = new ValidationContext(submitBulkOrderStructure);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(submitBulkOrderStructure, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }


                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    bulkOrderActionResponseList.Add(actionResponse);
                    return bulkOrderActionResponseList;


                }
            }

            //Bulk Orders
            foreach (var order in submitBulkOrderStructure.OrdersList)
            {
                if (string.IsNullOrEmpty(order.OrderReference) || string.IsNullOrWhiteSpace(order.OrderReference))
                {
                    actionResponse.Message = string.Format("A unique  Order Reference must be provided for each order for {0} Action", actionName);
                    actionResponse.ResponseCode = "518";
                    actionResponse.Reason = "";
                    actionResponse.OrderReference = order.OrderReference;
                    bulkOrderActionResponseList.Add(actionResponse);
                    continue;
                    //return bulkOrderActionResponseList;
                }

                BulkOrderActionResponse bulkOrderactionResponse = new BulkOrderActionResponse();
                var action = ProcessSubmitOrderAction(order, actionQuery, actionName);

                bulkOrderactionResponse.Message = action.Message;
                bulkOrderactionResponse.Reason = action.Reason;
                bulkOrderactionResponse.ResponseCode = action.ResponseCode;
                bulkOrderactionResponse.OrderReference = order.OrderReference;
                bulkOrderActionResponseList.Add(bulkOrderactionResponse);
            }



            return bulkOrderActionResponseList;
        }


        /// <summary>Processes the edit active order action.</summary>
        /// <param name="editActiveOrderStructure">The edit active order structure.</param>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public ActionResponse ProcessEditActiveOrderAction(EditActiveOrderStructure editActiveOrderStructure, string actionQuery, string actionName)
        {

            bool validSchema = false;
            string message = null;
            ActionResponse actionResponse;
            string clientCode = null;
            queryAction = QueryAction.EditActiveOrder;
            orderUpdateReceived = false;

            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaEditActiveOrderById, out message);

            if (!validSchema)
            {
                actionResponse = new ActionResponse();
                actionResponse.Message = string.Format("Invalid XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                return actionResponse;
            }

            if (useModelValidation)
            {
                bool modelValid = false;
                ValidationContext validationContext = new ValidationContext(editActiveOrderStructure);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(editActiveOrderStructure, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }
                    actionResponse = new ActionResponse();
                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    return actionResponse;

                }
            }

            var ordercontact = GetOrderContract(editActiveOrderStructure.InstrumentCode);
            if (string.IsNullOrEmpty(Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName)))
            {

                return InvalidInstrumentCodeResponse(editActiveOrderStructure.InstrumentCode);
            }


            clientCode = GetClientCode(editActiveOrderStructure.ClientCodeOrAccountNumber, editActiveOrderStructure.ClientAccountReference, out message);

            if (string.IsNullOrEmpty(clientCode))
            {
                return InvalidClientAccountNumber(message);
            }
            avventoApi.EditActiveOrderBySequence(Convert.ToInt32(editActiveOrderStructure.ActiveOrderId), userName, editActiveOrderStructure.MemberCode.ToUpper(), editActiveOrderStructure.DealerCode.ToUpper(), clientCode.ToUpper(), editActiveOrderStructure.BuyOrSell[0], ordercontact, Convert.ToDouble(editActiveOrderStructure.Price), Convert.ToInt32(editActiveOrderStructure.Quantity), editActiveOrderStructure.OrderReferenceNumber, editActiveOrderStructure.AdditionalOrderReferenceNumber == null ? "" : editActiveOrderStructure.AdditionalOrderReferenceNumber);

            DisplayUpdateWait();

            return actionResult;
        }


        /// <summary>Processes the suspend active order action.</summary>
        /// <param name="cancelOrSuspendOrderStructure">The cancel or suspend order structure.</param>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public ActionResponse ProcessSuspendActiveOrderAction(CancelOrSuspendOrderStructure cancelOrSuspendOrderStructure, string actionQuery, string actionName)
        {

            bool validSchema = false;
            string message = null;
            ActionResponse actionResponse = new ActionResponse();
            queryAction = QueryAction.SuspendActiveOrder;
            orderUpdateReceived = false;

            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaSuspendActiveOrder, out message);

            if (!validSchema)
            {
                actionResponse.Message = string.Format("Invalid  XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                return actionResponse;
            }

            if (useModelValidation)
            {
                bool modelValid = false;
                ValidationContext validationContext = new ValidationContext(cancelOrSuspendOrderStructure);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(cancelOrSuspendOrderStructure, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }
                    actionResponse = new ActionResponse();
                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    return actionResponse;

                }
            }
            var ordercontact = GetOrderContract(cancelOrSuspendOrderStructure.InstrumentCode);

            if (string.IsNullOrEmpty(Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName)))
            {
                return InvalidInstrumentCodeResponse(cancelOrSuspendOrderStructure.InstrumentCode);
            }

            avventoApi.SuspendActiveOrder(ordercontact, Convert.ToInt32(cancelOrSuspendOrderStructure.ActiveOrderId), userName, cancelOrSuspendOrderStructure.DealerCode.ToUpper(), cancelOrSuspendOrderStructure.MemberCode.ToUpper(), cancelOrSuspendOrderStructure.BuyOrSell[0]);

            DisplayUpdateWait();

            if (actionResult == null)
            {
                actionResponse = new ActionResponse();
                actionResponse.ResponseCode = "512";
                actionResponse.Reason = "Operation Failed or timeout";
                actionResponse.Message = "Download active orders to verified operation Status.";
                return actionResponse;
            }
            return actionResult;
        }


        /// <summary>Processes the cancel all orders action.</summary>
        /// <param name="cancelAllOrdersParam">The cancel all orders parameter.</param>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public ActionResponse ProcessCancelAllOrdersAction(CancelAllOrdersStructure cancelAllOrdersParam, string actionQuery, string actionName)

        {
            bool validSchema = false;
            string message = null;
            ActionResponse actionResponse;

            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaCancelAllOrders, out message);

            if (!validSchema)
            {
                actionResponse = new ActionResponse();
                actionResponse.Message = string.Format("Invalid XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                return actionResponse;
            }

            if (useModelValidation)
            {
                bool modelValid = false;
                ValidationContext validationContext = new ValidationContext(cancelAllOrdersParam);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(cancelAllOrdersParam, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }
                    actionResponse = new ActionResponse();
                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    return actionResponse;

                }
            }

            var ordercontact = GetOrderContract(cancelAllOrdersParam.InstrumentCode);

            if (string.IsNullOrEmpty(Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName)))
            {
                return InvalidInstrumentCodeResponse(cancelAllOrdersParam.InstrumentCode);
            }
            avventoApi.SendCancelAllOrders(ordercontact, cancelAllOrdersParam.BuyOrSell[0], cancelAllOrdersParam.MemberCode.ToUpper(), cancelAllOrdersParam.DealerCode.ToUpper(), userName);


            DisplayUpdateWait();

            if (actionResult == null)
            {
                actionResponse = new ActionResponse();
                actionResponse.ResponseCode = "512";
                actionResponse.Reason = "Operation Failed or timeout";
                actionResponse.Message = "Download active orders to verified operation Status.";
                return actionResponse;
            }
            return actionResult;
        }

        /// <summary>Processes the reduce order quantity action.</summary>
        /// <param name="reduceOrderStructure">The reduce order structure.</param>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public ActionResponse ProcessReduceOrderQuantityAction(ReduceOrderStructure reduceOrderStructure, string actionQuery, string actionName)
        {

            bool validSchema = false;
            string message = null;
            ActionResponse actionResponse;
            queryAction = QueryAction.ReduceOrderQuantity;
            orderUpdateReceived = false;

            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaReduceOrderQuantity, out message);

            if (!validSchema)
            {
                actionResponse = new ActionResponse();
                actionResponse.Message = string.Format("Invalid XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                return actionResponse;
            }

            if (useModelValidation)
            {
                bool modelValid = false;
                ValidationContext validationContext = new ValidationContext(reduceOrderStructure);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(reduceOrderStructure, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }
                    actionResponse = new ActionResponse();
                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    return actionResponse;

                }
            }

            var ordercontact = GetOrderContract(reduceOrderStructure.InstrumentCode.ToUpper());

            if (string.IsNullOrEmpty(Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName)))
            {
                return InvalidInstrumentCodeResponse(reduceOrderStructure.InstrumentCode);
            }

            avventoApi.ReduceOrderQuantity(Convert.ToInt32(reduceOrderStructure.ActiveOrderId), reduceOrderStructure.BuyOrSell[0], Convert.ToInt32(reduceOrderStructure.Quantity), ordercontact, userName, reduceOrderStructure.MemberCode.ToUpper());


            DisplayUpdateWait();

            if (actionResult == null)
            {
                actionResponse = new ActionResponse();
                actionResponse.ResponseCode = "512";
                actionResponse.Reason = "Operation Failed or timeout";
                actionResponse.Message = "Download active orders to verified operation Status.";
                return actionResponse;
            }
            return actionResult;
        }

        /// <summary>Processes the resubmit suspended order action.</summary>
        /// <param name="resubmitOrderStructure">The resubmit order structure.</param>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public ActionResponse ProcessResubmitSuspendedOrderAction(ResubmitOrderStructure resubmitOrderStructure, string actionQuery, string actionName)
        {

            bool validSchema = false;
            string message = null;
            ActionResponse actionResponse;
            queryAction = QueryAction.ResubmitSuspendedOrder;
            orderUpdateReceived = false;



            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaResubmitSuspendedOrder, out message);

            if (!validSchema)
            {
                actionResponse = new ActionResponse();
                actionResponse.Message = string.Format("Invalid XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                return actionResponse;
            }

            if (useModelValidation)
            {
                bool modelValid = false;
                ValidationContext validationContext = new ValidationContext(resubmitOrderStructure);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(resubmitOrderStructure, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }
                    actionResponse = new ActionResponse();
                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    return actionResponse;

                }
            }

            var ordercontact = GetOrderContract(resubmitOrderStructure.InstrumentCode);

            if (string.IsNullOrEmpty(Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName)))
            {
                return InvalidInstrumentCodeResponse(resubmitOrderStructure.InstrumentCode);
            }
            avventoApi.ResubmitSuspendedOrder(Convert.ToInt32(resubmitOrderStructure.ActiveOrderId), Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName), userName);


            DisplayUpdateWait();

            if (actionResult == null)
            {
                actionResponse = new ActionResponse();
                actionResponse.ResponseCode = "512";
                actionResponse.Reason = "Operation Failed or timeout";
                actionResponse.Message = "Download active orders to verified operation Status.";
                return actionResponse;
            }
            return actionResult;
        }

        /// <summary>Processes the edit suspended order action.</summary>
        /// <param name="editSuspendedOrderStructure">The edit suspended order structure.</param>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public ActionResponse ProcessEditSuspendedOrderAction(EditSuspendedOrderStructure editSuspendedOrderStructure, string actionQuery, string actionName)
        {


            bool validSchema = false;
            string message = null;
            string clientCode = null;
            ActionResponse actionResponse;
            queryAction = QueryAction.EditSuspendedOrder;
            orderUpdateReceived = false;



            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaEditSuspendedOrder, out message);

            if (!validSchema)
            {
                actionResponse = new ActionResponse();
                actionResponse.Message = string.Format("Invalid XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                return actionResponse;
            }


            if (useModelValidation)
            {
                bool modelValid = false;
                ValidationContext validationContext = new ValidationContext(editSuspendedOrderStructure);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(editSuspendedOrderStructure, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }
                    actionResponse = new ActionResponse();
                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    return actionResponse;

                }
            }

            var ordercontact = GetOrderContract(editSuspendedOrderStructure.InstrumentCode);

            if (string.IsNullOrEmpty(Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName)))
            {
                return InvalidInstrumentCodeResponse(editSuspendedOrderStructure.InstrumentCode);
            }


            clientCode = GetClientCode(editSuspendedOrderStructure.ClientCodeOrAccountNumber, editSuspendedOrderStructure.ClientAccountReference, out message);

            if (string.IsNullOrEmpty(clientCode))
            {
                return InvalidClientAccountNumber(message);
            }
            avventoApi.EditSuspendedOrder(ordercontact, editSuspendedOrderStructure.BuyOrSell[0], Convert.ToDouble(editSuspendedOrderStructure.Price), Convert.ToInt32(editSuspendedOrderStructure.Quantity), clientCode.ToUpper(), editSuspendedOrderStructure.Reference, editSuspendedOrderStructure.DealerCode, editSuspendedOrderStructure.MemberCode.ToUpper(), Convert.ToInt32(editSuspendedOrderStructure.ActiveOrderId), userName);

            DisplayUpdateWait();
            if (actionResult == null)
            {
                actionResponse = new ActionResponse();
                actionResponse.ResponseCode = "512";
                actionResponse.Reason = "Operation Failed or timeout";
                actionResponse.Message = "Download active orders to verified operation Status.";
                return actionResponse;
            }
            return actionResult;
        }


        /// <summary>Processes the delete order action.</summary>
        /// <param name="deleteOrderStructure">The delete order structure.</param>
        /// <param name="actionQuery">The action query.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public ActionResponse ProcessDeleteOrderAction(DeleteOrderStructure deleteOrderStructure, string actionQuery, string actionName)
        {

            bool validSchema = false;
            string message = null;
            ActionResponse actionResponse;
            queryAction = QueryAction.DeleteActiveOrder;
            orderUpdateReceived = false;


            validSchema = HelperMethods.ValidateSchema(actionQuery, xmlSchemaDeleteActiveOrder, out message);

            if (!validSchema)
            {
                actionResponse = new ActionResponse();
                actionResponse.Message = string.Format("Invalid XML Structure for Action: {0}", actionName);
                actionResponse.ResponseCode = "515";
                actionResponse.Reason = message;
                return actionResponse;
            }

            if (useModelValidation)
            {
                bool modelValid = false;
                ValidationContext validationContext = new ValidationContext(deleteOrderStructure);
                var validationResults = new List<ValidationResult>();
                StringBuilder sb = new StringBuilder();
                modelValid = Validator.TryValidateObject(deleteOrderStructure, validationContext, validationResults, true);
                if (!modelValid)
                {
                    int i = 1;
                    foreach (var vr in validationResults)
                    {
                        sb.AppendLine(string.Format("Error Sequence: {0} \tMessage: {1}", i, vr.ErrorMessage));
                    }
                    actionResponse = new ActionResponse();
                    actionResponse.Message = string.Format("There are some invalid parameters for  the:  {0} Action", actionName);
                    actionResponse.ResponseCode = "514";
                    actionResponse.Reason = sb.ToString();
                    return actionResponse;

                }
            }

            var ordercontact = GetOrderContract(deleteOrderStructure.InstrumentCode);

            if (string.IsNullOrEmpty(Helpers.HelperMethods.ParsePascal(ordercontact.InstrumentName)))
            {
                return InvalidInstrumentCodeResponse(deleteOrderStructure.InstrumentCode);
            }
            avventoApi.SuspendOrDeleteActiveOrder(ordercontact, Convert.ToInt32(deleteOrderStructure.ActiveOrderId), userName, deleteOrderStructure.DealerCode.ToUpper(), deleteOrderStructure.MemberCode.ToUpper(), deleteOrderStructure.BuyOrSell[0], 'D');


            DisplayUpdateWait();

            if (actionResult == null)
            {
                actionResponse = new ActionResponse();
                actionResponse.ResponseCode = "512";
                actionResponse.Reason = "Operation Failed or timeout";
                actionResponse.Message = "Download active orders to verified operation Status.";
                return actionResponse;
            }
            return actionResult;

        }


        public ActionResponse ProcessInstrumentSubscription(InstrumentSubscriptionStructure instrumentSubscription)
        {

            List<OrderContract> orderContracts = new List<OrderContract>();
            foreach (var instrumentcode in instrumentSubscription.InstrumentCodes)
            {
                // 
                OrderContract contract = GetOrderContract(instrumentcode.InstrumentCode.ToUpper());
                if (string.IsNullOrEmpty(contract.GetInstrumentName()))
                    continue;
                orderContracts.Add(contract);

            }
            if (instrumentSubscription.Action.ToUpper().Trim().Equals("SUBSCRIBE"))
            {
                avventoApi.SendFuturesContractSubscribeMessage(orderContracts, MarketNumber, userName);
            }
            else if (instrumentSubscription.Action.ToUpper().Trim().Equals("UNSUBSCRIBE"))
            {
                avventoApi.SendFuturesContractSubscribeMessage(orderContracts, MarketNumber, userName);
            }
            else
            {

            }

            ActionResponse actionResponse = new ActionResponse();
            actionResponse.ResponseCode = "0";
            actionResponse.Message = "Success";
            actionResponse.Reason = "";
            return actionResponse;
        }

        public ActionResponse ProcessIndicesSubscription(IndicesSubscriptionStructure indicesSubscriptionStructure)
        {
            ActionResponse actionResponse = new ActionResponse();
            if (string.IsNullOrEmpty(indicesSubscriptionStructure.Action) ||
                string.IsNullOrWhiteSpace(indicesSubscriptionStructure.Action))
            {
                actionResponse.ResponseCode = "519";
                actionResponse.Message = "An Indices Subscription Action cannot be empty";
                actionResponse.Reason = "Subscription Action Not Provided";
            }
            if (indicesSubscriptionStructure.Action.ToUpper().Trim().Equals("SUBSCRIBE"))
            {

                avventoApi.SendIndicesSubscribtion(userName);
                actionResponse.ResponseCode = "0";
                actionResponse.Message = "Success";
                actionResponse.Reason = "";

            }
            else if (indicesSubscriptionStructure.Action.ToUpper().Trim().Equals("UNSUBSCRIBE"))
            {
                // avventoApi.SendIndicesSubscribtion(userName);
            }
            else
            {
                //Invalid Action
                actionResponse.ResponseCode = "520";
                actionResponse.Message = "Invalid Indices Subscription Action";
                actionResponse.Reason = "The Subscription Action supplied  is not Found";
            }
            return actionResponse;
        }

        /// <summary>Invalids the instrument code response.</summary>
        /// <param name="instrumentCode">The instrument code.</param>
        /// <returns></returns>
        /// <autogeneratedoc />

        #endregion

        #region Class Helper Methods
        public string DownloadDatasetHandler(short dataType, bool reRequest, DateTime startDate, DateTime endDate, int specificRecord, bool historicalRetreival)
        {
            xmlresponse = null;
            int cnt = 0;
            dataDownloadTriggered = false;
            anotherSetOfClientDataToCome = true;

            LiveFeedServiceHelper liveFeedServiceHelper = new LiveFeedServiceHelper();

            if (avventoApi == null)
            {
                ActionResponse actionResponse = new ActionResponse
                {
                    ResponseCode = "508",
                    Message = "Client is not authenticated.",
                    Reason = "Client must bed logged on before accessing the specified operation."
                };

                return HelperMethods.Serialize<ActionResponse>(actionResponse);
            }


            switch (dataType)
            {
                case 1: // Display Data
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.Display, userName, false, startDate);
                        avventoApi.FileDownloads.ReceivedDisplayCallback = (display, action, anotherSetToCome) =>
                        {

                            dataDownloadTriggered = true;
                            List<MarketDisplayInformation> displaydataList = DataDownloadDisplayData(display);
                            xmlresponse = HelperMethods.Serialize<List<MarketDisplayInformation>>(displaydataList);

                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<MarketDisplayInformation> displaydataList = new List<MarketDisplayInformation>();
                            // displaydataList.Add(new MarketDisplayInformation());
                            xmlresponse = HelperMethods.Serialize<List<MarketDisplayInformation>>(displaydataList);
                        }


                        break;
                    }

                case 2:  // Instrument Data
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.Instruments, userName, false, startDate);
                        avventoApi.FileDownloads.ReceivedInstrumentCallBack = (instrument, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<InstrumentData> instrumentDataList = DataDownloadInstrumentData(instrument);
                            xmlresponse = HelperMethods.Serialize<List<InstrumentData>>(instrumentDataList);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<InstrumentData> instrumentDataList = new List<InstrumentData>();
                            xmlresponse = HelperMethods.Serialize<List<InstrumentData>>(instrumentDataList);
                        }

                        break;
                    }

                case 3: // Contract Dates Data
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.ContractDates, userName, false, DateTime.Now);
                        avventoApi.FileDownloads.ReceivedContractDateCallback = (contractDate, actio, anotherSetToComen) =>
                        {
                            dataDownloadTriggered = true;
                            List<DataContracts.ContractsDateData> contractDates = DataDownloadContractDateData(contractDate);
                            xmlresponse = HelperMethods.Serialize<List<DataContracts.ContractsDateData>>(contractDates);

                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<DataContracts.ContractsDateData> contractDates = new List<ContractsDateData>();
                            xmlresponse = HelperMethods.Serialize<List<DataContracts.ContractsDateData>>(contractDates);
                        }
                        break;

                    }


                case 5: // Active Order Data
                    {
                        Cache.ActiveOrders.Clear();
                        anotherSetOfActiveOrderToCome = false;
                        avventoApi.SendFileDownloadMessage(FileIdentifier.ActiveOrders, userName, false, DateTime.Today);
                        avventoApi.FileDownloads.RecievedActiveOrderCallback = (activeorder, actiontype, anotherSetToComen) =>
                        {
                            anotherSetOfActiveOrderToCome = anotherSetToComen;
                            dataDownloadTriggered = true;
                            foreach (var item in activeorder)
                            {
                                Cache.Update(Cache.ActiveOrders, item.IdOrder, item, actiontype);
                            }

                        };


                        DataAvailable();
                        if (dataDownloadTriggered)
                        {
                            while (anotherSetOfActiveOrderToCome)
                            {
                                Thread.Sleep(10);
                            }
                        }
                        if (Cache.ActiveOrders.Count > 0)
                        {
                            List<ActiveOrderData> activeOrderData = DataDownloadActiveOrderData(Cache.ActiveOrders);
                            if (MaxRecordCount > 0)
                            {
                                xmlresponse = HelperMethods.Serialize<List<ActiveOrderData>>(activeOrderData.OrderBy(i => i.ActiveOrderId).Take(MaxRecordCount).ToList());
                            }
                            else
                            {
                                xmlresponse = HelperMethods.Serialize<List<ActiveOrderData>>(activeOrderData);

                            }
                        }
                        else
                        {
                            List<ActiveOrderData> activeOrderData = new List<ActiveOrderData>();
                            xmlresponse = HelperMethods.Serialize<List<ActiveOrderData>>(activeOrderData);
                        }
                        /*
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<ActiveOrderData> activeOrderData = new List<ActiveOrderData>();
                            xmlresponse = HelperMethods.Serialize<List<ActiveOrderData>>(activeOrderData);
                        }*/
                        break;
                    }

                /*
            case 6: // Uncomfirmed Order Data
                {

                    avventoApi.SendFileDownloadMessage(FileIdentifier.UncompletedOrders, userName, false, startDate);


                    break;
                }
*/

                case 7: // Completed Order Data
                    {
                        Cache.CompletedOrders.Clear();

                        bool _anotherSetToCome = false;
                        avventoApi.SendFileDownloadMessage(FileIdentifier.CompletedOrders, userName, false, startDate);
                        avventoApi.FileDownloads.ReceivedCompletedOrderCallback = (co, action, anotherSetToCome) =>
                        {
                            _anotherSetToCome = anotherSetToCome;
                            dataDownloadTriggered = true;

                            foreach (var item in co)
                            {
                                Cache.Update(Cache.CompletedOrders, item.IdOrder, item, action);
                            }


                        };

                        DataAvailable();
                        if (dataDownloadTriggered)
                        {
                            while (_anotherSetToCome)
                            {
                                Thread.Sleep(20);
                            }
                        }

                        if (Cache.CompletedOrders.Count > 0)
                        {
                            List<CompletedOrdersData> completedOrdersData = DataDownloadCompletedOrderData(Cache.CompletedOrders);
                            xmlresponse = HelperMethods.Serialize<List<CompletedOrdersData>>(completedOrdersData);
                        }
                        else
                        {
                            List<CompletedOrdersData> completedOrdersData = new List<CompletedOrdersData>();
                            xmlresponse = HelperMethods.Serialize<List<CompletedOrdersData>>(completedOrdersData);
                        }

                    }
                    break;


                case 8: // Deals Data
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.Deals, userName, false, startDate);
                        avventoApi.FileDownloads.ReceivedDealCallback = (deal, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<DealsData> dealData = DataDownloadDealsData(deal);
                            xmlresponse = HelperMethods.Serialize<List<DealsData>>(dealData);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<DealsData> dealData = new List<DealsData>();
                            xmlresponse = HelperMethods.Serialize<List<DealsData>>(dealData);
                        }



                    }
                    break;

                case 9: //Postion Data
                    {
                        avventoApi.SendFileDownloadMessage(FileIdentifier.Positions, userName, false, startDate);
                        avventoApi.FileDownloads.ReceivedPositionDataCallback = (position, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<PositionData> positionData = DataDownloadPositionData(position);
                            xmlresponse = HelperMethods.Serialize<List<PositionData>>(positionData);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<PositionData> positionData = new List<PositionData>();
                            xmlresponse = HelperMethods.Serialize<List<PositionData>>(positionData);
                        }



                    }
                    break;
                /*
            case 10:
                {

                    avventoApi.SendFileDownloadMessage(FileIdentifier.UnmatchedAcknowledgment, userName, false, startDate);



                }
                break;
            case 11: // Unmatch Deaals
                {


                    avventoApi.SendFileDownloadMessage(FileIdentifier.UnmatchedCapture, userName, false, startDate);

                    break;
                }
                */
                case 12: // Client Data
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.Client, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedClientDataCallback = (client, action, lastPieceChunk) =>
                        {
                            anotherSetOfClientDataToCome = lastPieceChunk;
                            dataDownloadTriggered = true;
                            foreach (var item in client)
                            {
                                Cache.Update(Cache.Clients, item.IdClient, item, action);

                            }
                        };

                        while (anotherSetOfClientDataToCome)
                        {
                            Thread.Sleep(10);
                        }

                        if (Cache.Clients.Count > 0)
                        {
                            List<ClientData> clientData = DataDownloadClientData(Cache.Clients);
                            if (MaxRecordCount > 0)
                            {
                                xmlresponse = HelperMethods.Serialize<List<ClientData>>(clientData.OrderBy(i => i.ClientId).Take(MaxRecordCount).ToList());
                            }
                            else
                            {
                                xmlresponse = HelperMethods.Serialize<List<ClientData>>(clientData);

                            }
                        }
                        else
                        {
                            List<ClientData> clientData = new List<ClientData>();
                            xmlresponse = HelperMethods.Serialize<List<ClientData>>(clientData);
                        }

                        break;
                    }
                case 14: // Dealer Data
                    {


                        avventoApi.SendFileDownloadMessage(FileIdentifier.Dealer, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedDealerDataCallback = (dealer, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<DealerData> dealerData = DataDownloadDealerData(dealer);
                            xmlresponse = HelperMethods.Serialize<List<DealerData>>(dealerData);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<ClientData> clientData = new List<ClientData>();
                            xmlresponse = HelperMethods.Serialize<List<ClientData>>(clientData);
                        }


                        break;
                    }
                case 15: // Member Data
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.Member, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedMemberCallBack = (member, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<MemberData> memberData = DataDownloadMemberData(member);
                            xmlresponse = HelperMethods.Serialize<List<MemberData>>(memberData);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<MemberData> memberData = new List<MemberData>();
                            xmlresponse = HelperMethods.Serialize<List<MemberData>>(memberData);
                        }

                        break;
                    }
                case 16: // MTM Data
                    {



                        avventoApi.SendFileDownloadMessage(FileIdentifier.MarkToMarket, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedMarkToMarketCallback = (mtm, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<MarkToMarketData> markToMarketData = DataDownloadMarkToMarket(mtm);
                            xmlresponse = HelperMethods.Serialize<List<MarkToMarketData>>(markToMarketData);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<MarkToMarketData> markToMarketData = new List<MarkToMarketData>();
                            xmlresponse = HelperMethods.Serialize<List<MarkToMarketData>>(markToMarketData);
                        }

                        break;
                    }
                /*
            case 23: // Holiday Data
                {

                    avventoApi.SendFileDownloadMessage(FileIdentifier.Index, userName, false, startDate);

                    break;
                }
*/
                case 39: // Intrument Types
                    {


                        avventoApi.SendFileDownloadMessage(FileIdentifier.InstrumentType, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedInstrumentTypeCallBack = (instrumentType, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<InstrumentTypeData> instrumentTypeList = DataDownloadInstrumentTypeData(instrumentType);
                            xmlresponse = HelperMethods.Serialize<List<InstrumentTypeData>>(instrumentTypeList);

                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<InstrumentTypeData> instrumentTypeList = new List<InstrumentTypeData>();
                            xmlresponse = HelperMethods.Serialize<List<InstrumentTypeData>>(instrumentTypeList);
                        }
                        break;
                    }
                /*
               case 61: // Tripartile Setup Data
                   {


                       avventoApi.SendFileDownloadMessage(FileIdentifier.Tripartite, userName, false, startDate);


                       avventoApi.FileDownloads.ReceivedTripartiteSetupDataCallback = (tripartiteSetupData, action) =>
                       {

                           //  List<TripartiteSetupData> tripartiteSetupData = TripartiteSetupDataParse(tripartiteSetupData);
                           //  xmlresponse = HelperMethods.Serialize<TripartiteSetupData>(tripartiteSetupData);

                       };


                       break;
                   }

               case 65: // Clearning Member Data
                   {

                       avventoApi.SendFileDownloadMessage(FileIdentifier.ClearingMember, userName, false, startDate);

                       avventoApi.FileDownloads.ReceivedClearingMemberCallBack = (clearingMember, action) =>
                       {

                       };
                       break;
                   }
                  
                case 66:
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.ClientDetail, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedClientDetailCallback = (clientDetail, action) =>
                        {
                            dataDownloadTriggered = true;
                            List<ClientDetailData> clientInformationList = DataDownloadClientDetailData(clientDetail);
                            xmlresponse = HelperMethods.Serialize<List<ClientDetailData>>(clientInformationList);
                        };


                        break;

                    }


                case 89: //Exchange Annoucement
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.Announcements, userName, false, startDate);

                        break;

                    }
                case 129: //News

                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.News, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedNewsServiceCallBack = (newsService, action) =>
                        {
                            //
                        };
                        break;

                    }

     */
                case 137:
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.IndicesData, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedIndicesPriceDataCallBack = (index, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<IndicesDataClass> indiceStructureList = DataDownloadIndexPriceData(index);
                            xmlresponse = HelperMethods.Serialize<List<IndicesDataClass>>(indiceStructureList);
                        };

                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<IndicesDataClass> indiceStructureList = new List<IndicesDataClass>();
                            xmlresponse = HelperMethods.Serialize<List<IndicesDataClass>>(indiceStructureList);
                        }

                        break;

                    }
                case 138:
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.Indices, userName, false, startDate);


                        avventoApi.FileDownloads.ReceivedIndicesCallBack = (index, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<IndicesData> indiceStructureList = DataDownloadIndicesData(index);
                            xmlresponse = HelperMethods.Serialize<List<IndicesData>>(indiceStructureList);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<IndicesData> indiceStructureList = new List<IndicesData>();
                            xmlresponse = HelperMethods.Serialize<List<IndicesData>>(indiceStructureList);
                        }
                        break;


                    }

                case 141:
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.SharesInIssue, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedSharesInIssueCallBack = (share, action, anotherSetToCome) =>
                        {

                            dataDownloadTriggered = true;
                            List<SharesInIssueData> sharesInIssueData = DataDownloadSharesInIssueData(share);
                            xmlresponse = HelperMethods.Serialize<List<SharesInIssueData>>(sharesInIssueData);

                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<SharesInIssueData> sharesInIssueData = new List<SharesInIssueData>();
                            xmlresponse = HelperMethods.Serialize<List<SharesInIssueData>>(sharesInIssueData);
                        }
                        break;
                    }
                case 142:
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.AuditActiveOrders, userName, false, startDate);

                        avventoApi.FileDownloads.RecievedAuditActiveOrderCallback = (auditactiveorder, action, anotherSetToCome) =>
                        {

                            dataDownloadTriggered = true;
                            List<AuditActiveOrdersData> auditActiveOrdersStructure = DataDownloadAuditActiveOrdersData(auditactiveorder);
                            xmlresponse = HelperMethods.Serialize<List<AuditActiveOrdersData>>(auditActiveOrdersStructure);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<AuditActiveOrdersData> auditActiveOrdersStructure = new List<AuditActiveOrdersData>();
                            xmlresponse = HelperMethods.Serialize<List<AuditActiveOrdersData>>(auditActiveOrdersStructure);
                        }

                        break;
                    }


                case 146:
                    {


                        avventoApi.SendFileDownloadMessage(FileIdentifier.IndexData, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedIndexDataCallBack = (indexData, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<IndexHistoricalData> indexDataStructures = DataDownloadIndexData(indexData);
                            xmlresponse = HelperMethods.Serialize<List<IndexHistoricalData>>(indexDataStructures);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<IndexHistoricalData> indexDataStructures = new List<IndexHistoricalData>();
                            xmlresponse = HelperMethods.Serialize<List<IndexHistoricalData>>(indexDataStructures);
                        }

                        break;
                    }
                case 147: //147 Index Constituents
                    {

                        avventoApi.SendFileDownloadMessage(FileIdentifier.IndexConstituents, userName, false, startDate);

                        avventoApi.FileDownloads.ReceivedIndexConstituentsCallBack = (indexConstituent, action, anotherSetToCome) =>
                        {
                            dataDownloadTriggered = true;
                            List<IndexConstituentsData> indiceconstList = DataDownloadIndexConstituentData(indexConstituent);
                            xmlresponse = HelperMethods.Serialize<List<IndexConstituentsData>>(indiceconstList);
                        };
                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<IndexConstituentsData> indiceconstList = new List<IndexConstituentsData>();
                            xmlresponse = HelperMethods.Serialize<List<IndexConstituentsData>>(indiceconstList);
                        }
                        break;
                    }


                case 300: //Live Market Prices
                    {


                        dataDownloadTriggered = true;
                        List<LiveMarketPricesData> LiveMarketPricesDataList = liveFeedServiceHelper.GetLiveMarketPricesDatas();
                        xmlresponse = HelperMethods.Serialize<List<LiveMarketPricesData>>(LiveMarketPricesDataList);

                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<LiveMarketPricesData> LiveMarketPricesDataListEmpty = new List<LiveMarketPricesData>();
                            xmlresponse = HelperMethods.Serialize<List<LiveMarketPricesData>>(LiveMarketPricesDataListEmpty);
                        }
                        break;
                    }

                case 301: //Live Index Prices
                    {


                        dataDownloadTriggered = true;
                        List<LiveIndexPricesData> LiveIndexPricesDataList = liveFeedServiceHelper.GetLiveIndexPricesDatas();
                        xmlresponse = HelperMethods.Serialize<List<LiveIndexPricesData>>(LiveIndexPricesDataList);

                        DataAvailable();
                        if (xmlresponse == null && dataDownloadTriggered == false)
                        {
                            List<LiveIndexPricesData> LiveIndexPricesDataEmpty = new List<LiveIndexPricesData>();
                            xmlresponse = HelperMethods.Serialize<List<LiveIndexPricesData>>(LiveIndexPricesDataEmpty);
                        }
                        break;
                    }


                default:
                    {
                        ActionResponse actionResponse = new ActionResponse
                        {
                            ResponseCode = "509",
                            Message = "The specified criteria returned no results",
                            Reason = "Invalid Data Type specified."
                        };

                        return HelperMethods.Serialize<ActionResponse>(actionResponse);

                    }


            }

            int timer = 0;
            while (dataDownloadTriggered == true && xmlresponse == null && timer < 30)
            {
                Thread.Sleep(100);
                timer++;
            }

            /*
            cnt = 0;
            while ((dataDownloadTriggered == false && cnt < (retry *2) ) && xmlresponse == null)
            {
                Thread.Sleep(waitTime);
                cnt++;
            }
         

            if (xmlresponse == null)
            {
                switch (dataType)
                {
                    case 39: // Intrument Types
                        {
                            InstrumentTypeData insttype = new InstrumentTypeData();
                            List<InstrumentTypeData> instrumentTypeList = new List<InstrumentTypeData>();
                            instrumentTypeList.Add(insttype);
                            xmlresponse = HelperMethods.Serialize<List<InstrumentTypeData>>(instrumentTypeList);
                            break;
                        }
                    default:
                        {
                            ActionResponse actionResponse = new ActionResponse();
                            actionResponse.ResponseCode = "510";
                            actionResponse.Message = "No Data Retrieved";
                            actionResponse.Reason = "No data is all available for the specified criteria.";
                            xmlresponse = HelperMethods.Serialize<ActionResponse>(actionResponse);
                            break;
                        }

                }
            }
            */

            return xmlresponse;
        }



        /// <summary>Gets the order contract.</summary>
        /// <param name="apiTest">The API test.</param>
        /// <param name="instrumentCode">The instrument code.</param>
        /// <returns></returns>
        public OrderContract GetOrderContract(string instrumentCode)
        {

            OrderContract ordercontact = new OrderContract();



            //Instruments

            int counter = 0;
            while (InstrumentData == null && counter < 10)
            {
                Thread.Sleep(111);
                counter++;
            }

            if (InstrumentData == null)
            {
                return ordercontact;
            }

            //Display

            counter = 0;
            while (DisplayData == null && counter < 10)
            {
                Thread.Sleep(111);
                counter++;
            }

            if (DisplayData == null)
            {
                return ordercontact;
            }



            string displaycode = null;


            foreach (var item in InstrumentData)
            {

                string instrumentDisplay = HelperMethods.ParsePascal(item.DisplayName).ToUpper();
                if (instrumentDisplay.Equals(instrumentCode.ToUpper()))
                {
                    displaycode = HelperMethods.ParsePascal(item.Instrument).ToUpper();
                    break;
                }
            }


            foreach (var item in DisplayData)
            {


                string instrumentName = HelperMethods.ParsePascal(item.Contract.InstrumentName).ToUpper();
                if (instrumentName.Equals(displaycode))
                {
                    ordercontact = item.Contract;
                    break;
                }
            }

            return ordercontact;
        }


        /// <summary>Gets the name of the instrument code by contract.</summary>
        /// <param name="ContractName">Name of the contract.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        private string GetInstrumentCodeByContractName(string ContractName)
        {

            string instrumentCode = "";


            foreach (var item in InstrumentData)
            {

                string instrument = HelperMethods.ParsePascal(item.Instrument).ToUpper();
                if (instrument.Equals(ContractName.ToUpper()))
                {
                    instrumentCode = HelperMethods.ParsePascal(item.DisplayName).ToUpper();
                    break;
                }
            }

            return instrumentCode;
        }

        /// <summary>Gets the client code by account number.</summary>
        /// <param name="AccountNumber">The account number.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public string GetClientCodeByAccountNumber(string AccountNumber)
        {

            string clientCode = null;
            int counter = 0;


            while (Cache.concurrentClientDataKeyClientCode.Count == 0 && counter < retry)
            {
                Thread.Sleep(waitTime);
                counter++;
            }
            if (Cache.concurrentClientDataKeyAccountNumber.ContainsKey(AccountNumber))
            {
                clientCode = Cache.concurrentClientDataKeyAccountNumber[AccountNumber];
            }
            else
            {
                clientCode = null;
            }


            return clientCode;
        }

        public string GetClientCode(string clientCodeOrAccountNumber, string clientReference, out string message)
        {
            string clientCodeOut = null;



            message = null;
            if (!string.IsNullOrEmpty(clientCodeOrAccountNumber.Trim()))
            {
                if (clientCodeOrAccountNumber.Trim().ToUpper() == "C")
                {
                    if (!string.IsNullOrEmpty(clientReference.Trim()))
                    {
                        clientCodeOut = clientReference;
                    }
                    else
                    {
                        clientCodeOut = null;
                    }
                }
                else if (clientCodeOrAccountNumber.Trim().ToUpper() == "A")
                {
                    if (!string.IsNullOrEmpty(clientReference.Trim()))
                    {
                        clientCodeOut = GetClientCodeByAccountNumber(clientReference.Trim().ToUpper());
                        if (string.IsNullOrEmpty(clientCodeOut))
                        {
                            message = string.Format("The supplied client reference value: {0}  cannot be found'", clientReference);
                        }

                    }
                    else
                    {
                        clientCodeOut = null;
                    }
                }
                else
                {
                    message = string.Format("The supplied value: {0}  is invalid for field 'ClientCodeOrAccountNumber'", clientCodeOrAccountNumber);

                }
            }
            else
            {
                message = "ClientCodeOrAccountNumber field cannot be empty.";

            }

            return clientCodeOut;

        }

        private static ActionResponse InvalidInstrumentCodeResponse(string instrumentCode)
        {
            var orderOutputMessage = string.Format("Unable to locate Instrument associated with the specified Instrument Code: {0}", instrumentCode);
            ActionResponse actionresponse = new ActionResponse();
            actionresponse.ResponseCode = "511";
            actionresponse.Message = orderOutputMessage;
            actionresponse.Reason = "The supplied Instrument code is not found.";
            return actionresponse;
        }



        /// <summary>Invalids the client account number.</summary>
        /// <param name="AccountNumber">The account number.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        private static ActionResponse InvalidClientAccountNumber(string AccountNumber)
        {
            var orderOutputMessage = string.Format("Unable to locate client Code associated with the specified Account Number: {0}", AccountNumber);
            ActionResponse actionresponse = new ActionResponse();
            actionresponse.ResponseCode = "516";
            actionresponse.Message = orderOutputMessage;
            actionresponse.Reason = "The supplied Account Number could not be not found.";
            return actionresponse;
        }
        #endregion

        #region Data Download Retrieval 
        /// <summary>Marks to market parse.</summary>
        /// <param name="markToMarket">The mark to market.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        private List<MarkToMarketData> DataDownloadMarkToMarket(List<MarkToMarketStructure> markToMarket)
        {
            List<MarkToMarketData> markToMarketDataList = new List<MarkToMarketData>();


            foreach (var item in markToMarket)
            {
                MarkToMarketData markToMarketData = new MarkToMarketData();

                markToMarketData.ClosingPrice = item.ClosingPrice;
                markToMarketData.ClosingRate = item.ClosingRate;
                markToMarketData.ContractDateId = item.IdContractDate;
                markToMarketData.InstrumentId = item.IdInstrument;
                markToMarketData.StrikeId = item.IdStrike;
                markToMarketData.InstrumentCode = InstrumentData != null ? GetInstrumentCodeByContractName(item.Contract.GetInstrumentName()) : "";
                markToMarketData.OpenInterest = item.OpenInterest;
                markToMarketData.SpotPrice = item.SpotPrice;
                markToMarketData.TradeDate = item.TradeDate.ToDateTime();
                markToMarketData.Volatility = item.Volatility;

                markToMarketDataList.Add(markToMarketData);

            }



            return markToMarketDataList;
        }

        /// <summary>Members the data parse.</summary>
        /// <param name="memberStructure">The member structure.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<MemberData> DataDownloadMemberData(List<MemberStructure> memberStructure)
        {
            List<MemberData> memberDataList = new List<MemberData>();

            foreach (var item in memberStructure)
            {
                MemberData memberData = new MemberData();
                memberData.Description = HelperMethods.ParsePascal(item.Description);
                memberData.MemberCode = HelperMethods.ParsePascal(item.MemberCode);
                memberData.PlaceOfSettlement = HelperMethods.ParsePascal(item.PlaceOfSettlement);
                memberData.SORAccount = HelperMethods.ParsePascal(item.SORAccount);
                memberData.ClearingMemberId = item.IdClearingMember;
                memberData.GlobalMarketId = item.IdGlobalMarket;
                memberData.MasterMemberId = item.IdMasterMember;
                memberData.MemberId = item.IdMember;
                memberDataList.Add(memberData);
            }

            return memberDataList;
        }

        /// <summary>Actives the order parse.</summary>
        /// <param name="activeOrderStructures">The active order structures.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<ActiveOrderData> DataDownloadActiveOrderData(ConcurrentDictionary<int, ActiveOrderStructure> ActiveOrders) //List<ActiveOrderStructure> activeOrderStructures)
        {
            List<ActiveOrderData> activeorderdatalist = new List<ActiveOrderData>();



            foreach (var item in ActiveOrders.Values)
            {
                ActiveOrderData activeOrderData = new ActiveOrderData();

                activeOrderData.ActiveOrderId = item.IdOrder;
                activeOrderData.ClearingMember = HelperMethods.ParsePascal(item.ClearingMember);
                activeOrderData.MemberCode = HelperMethods.ParsePascal(item.Member);
                activeOrderData.DealerCode = HelperMethods.ParsePascal(item.Dealer);
                activeOrderData.ClientCode = HelperMethods.ParsePascal(item.Principle);
                activeOrderData.State = item.State.ToString();
                activeOrderData.Quantity = item.Quantity;
                activeOrderData.Quote = item.Quote;

                activeOrderData.InstrumentCode = !Cache.concurrentDicInstrumentDataKeyInstrumentName.ContainsKey(item.Contract.GetInstrumentName()) ? "" : Cache.concurrentDicInstrumentDataKeyInstrumentName[item.Contract.GetInstrumentName()];

                // activeOrderData.InstrumentCode = InstrumentData != null ? GetInstrumentCodeByContractName(item.Contract.GetInstrumentName()) : "";

                activeOrderData.AccountNumber = Cache.concurrentClientDataKeyClientCode.ContainsKey(activeOrderData.ClientCode) == false
                    ? ""
                    : Cache.concurrentClientDataKeyClientCode[activeOrderData.ClientCode];

                activeOrderData.BuyOrSell = item.BuyOrSell.ToString();
                activeOrderData.InTime = DataConverter.ConvertFromDelphiTime(item.InTime).ToString();
                activeOrderData.OrderReference = HelperMethods.ParsePascal(item.OrderReference);
                activeOrderData.SubAccount = HelperMethods.ParsePascal(item.SubAccount);
                activeOrderData.IcebergQuantity = item.IcebergQuantity;
                activeOrderData.PrincipleAgency = item.PrincipleAgency;
                activeOrderData.ExpiryDate = item.HoldoverDate.ToDateTime();
                activeOrderData.AdditionalReference =
                    HelperMethods.ParsePascal(item.AdditionalReference);
                activeOrderData.SiloReceiptNumber = item.SiloReceiptNumber;
                activeOrderData.SiloLocationCode =
                    HelperMethods.ParsePascal(item.SiloLocationCode);
                activeOrderData.GradeCode = HelperMethods.ParsePascal(item.GradeCode);
                activeOrderData.CountryOfOriginCode =
                    HelperMethods.ParsePascal(item.CountryOfOriginCode);
                activeOrderData.MustFill = item.MustFill;
                activeOrderData.BidType = item.BidType;
                activeorderdatalist.Add(activeOrderData);

            }

            return activeorderdatalist;
        }



        /// <summary>Instruments the data parse.</summary>
        /// <param name="instrumentdata">The instrumentdata.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<InstrumentData> DataDownloadInstrumentData(List<InstrumentStructure> instrumentdata)
        {
            List<InstrumentData> instrumentDataList = new List<InstrumentData>();
            foreach (var item in instrumentdata)
            {
                string displayName = HelperMethods.ParsePascal(item.DisplayName).Trim();

                if (!string.IsNullOrEmpty(displayName))
                {
                    DataContracts.InstrumentData instrumentData = new InstrumentData();
                    instrumentData.InstrumentId = item.IdInstrument;
                    instrumentData.InstrumentTypeId = item.IdInstrumentType;
                    instrumentData.GroupId = item.IdGroup;
                    instrumentData.FutureFeeId = item.IdFutureFee;
                    instrumentData.OptionFeeId = item.IdOptionFee;
                    instrumentData.DeliveryFeeId = item.IdDeliveryFee;
                    instrumentData.Market = this.MarketNumber.ToString(); // HelperMethods.ParsePascal(item.Market.ToString());
                    instrumentData.MarketShard = item.MarketShard;
                    instrumentData.Instrument = HelperMethods.ParsePascal(item.Instrument);
                    instrumentData.InstrumentClass = ((int)item.InstrumentClass).ToString();
                    instrumentData.ISIN = HelperMethods.ParsePascal(item.ISIN);
                    instrumentData.Description = HelperMethods.ParsePascal(item.Description);
                    instrumentData.Onscreen = item.Onscreen;
                    instrumentData.CouponRate = item.CouponRate;
                    instrumentData.NominalDivisor = item.NominalDivisor;

                    instrumentData.IssueDate = item.IssueDate.ToDateTime();
                    instrumentData.MaturityDate = item.MaturityDate.ToDateTime();

                    instrumentData.InflationIndex = ((int)item.InflationIndex).ToString();
                    instrumentData.DividendPaid = item.DividendPaid;
                    instrumentData.UnderlyingId = item.IdUnderlying;
                    instrumentData.OptionExerciseIsPercentage = item.OptionExerciseIsPercentage;
                    instrumentData.OptionExerciseCost = item.OptionExerciseCost;
                    instrumentData.GroupMargin = item.GroupMargin;
                    instrumentData.DisplayName = HelperMethods.ParsePascal((item.DisplayName));
                    instrumentData.SettlementDays = item.SettlementDays;

                    instrumentData.TradingSessionId = item.IdTradingSession;
                    instrumentData.ValuationMethod = item.ValuationMethod;
                    instrumentData.VAT = item.VAT;
                    instrumentData.SettlementMargin = item.SettlementMargin;
                    instrumentData.IsPhysicalSettlement = item.IsPhysicalSettlement;
                    instrumentData.GroupCode = HelperMethods.ParsePascal((item.GroupCode));
                    instrumentData.TopFourty = item.TopFourty;
                    instrumentData.TopOneHundred = item.TopOneHundred;
                    instrumentData.ApplyMTMAfterExpiry = item.ApplyMTMAfterExpiry;
                    instrumentData.IsReplicaBond = item.IsReplicaBond;
                    instrumentData.ReferenceCpiRate = item.ReferenceCpiRate;
                    instrumentData.MinimumInitiationFee = item.MinimumInitiationFee;
                    instrumentData.FirstTradeReference = HelperMethods.ParsePascal((item.FirstTradeReference));
                    instrumentData.IdMarginParameterInstrument = item.IdMarginParameterInstrument;
                    instrumentData.CountryCode = HelperMethods.ParsePascal((item.CountryCode));
                    instrumentData.NumberOfDaysInYear = item.NumberOfDaysInYear;
                    instrumentData.BondFormulaDecimalPlaces = item.BondFormulaDecimalPlaces;
                    instrumentData.Classification = HelperMethods.ParsePascal((item.Classification));
                    instrumentData.ValidatedAtCSD = item.ValidatedAtCSD;
                    instrumentData.PropTradingAllowed = item.PropTradingAllowed;
                    instrumentData.VettingAgentName = HelperMethods.ParsePascal((item.VettingAgentName));
                    instrumentData.VettingAgentContact = HelperMethods.ParsePascal((item.VettingAgentContact));
                    instrumentData.ShareHoldingPercentageLimit = item.ShareHoldingPercentageLimit;
                    instrumentData.Sector = HelperMethods.ParsePascal((item.Sector));
                    instrumentData.SecurityType = HelperMethods.ParsePascal((item.SecurityType));
                    instrumentDataList.Add(instrumentData);
                }
            }

            return instrumentDataList;
        }
        /// <summary>Clients the detail data parse.</summary>
        /// <param name="clientDetailsDataDic">The client details data dic.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<ClientDetailData> DataDownloadClientDetailData(List<s_ClientInfo> clientDetailsDataDic)
        {

            List<ClientDetailData> clientInformationList = new List<ClientDetailData>();


            foreach (var item in clientDetailsDataDic)
            {
                ClientDetailData clientDetailData = new ClientDetailData();

                clientDetailData.ClientId = item.Id_Client;
                clientDetailData.ClientMasterId = item.Id_Client_Master;
                clientDetailData.MemberId = item.Id_Member;
                clientDetailData.MemberCode = HelperMethods.ParsePascal(item.Member_Code);
                clientDetailData.CountryId = item.IdCountry;
                clientDetailData.ClientCode = HelperMethods.ParsePascal(item.Client_Code);
                clientDetailData.NumberId = HelperMethods.ParsePascal(item.Id_Number);
                clientDetailData.ClientCode = HelperMethods.ParsePascal(item.Client_Code);
                clientDetailData.PassportNumber = HelperMethods.ParsePascal(item.Passport_Number);

                clientDetailData.VatRegistration = HelperMethods.ParsePascal(item.Vat_Registration);
                clientDetailData.ClientName = HelperMethods.ParsePascal(item.Client_Name);
                clientDetailData.SecondName = HelperMethods.ParsePascal(item.Second_Name);

                clientDetailData.ClientGlobalMarketId = item.IdClientGlobalMarket;
                clientDetailData.ComplianceOfficer = HelperMethods.ParsePascal(item.Compliance_Officer);
                clientDetailData.DiscretionaryManaged = item.Discretionary_Managed;
                clientDetailData.DateOfBirth = item.Date_Of_Birth.ToDateTime();
                clientDetailData.ClientsBankAccountNumber = HelperMethods.ParsePascal(item.Clients_Bank_Account_Number);

                clientDetailData.Multiplication_Factor = item.Multiplication_Factor;
                clientDetailData.SwiftCode = HelperMethods.ParsePascal(item.Swift_Code);
                clientDetailData.RegistrationNumber = HelperMethods.ParsePascal(item.Registration_Number);
                clientDetailData.IncomeTaxNumber = HelperMethods.ParsePascal(item.Client_Code);
                clientDetailData.IsUpdate = item.Is_Update;
                clientDetailData.IsIndividual = item.Is_Individual;
                clientDetailData.ElectronicAccountNumber = HelperMethods.ParsePascal(item.Client_Code);
                clientDetailData.IsElectronic = item.Is_Electronic;
                clientDetailData.Proof_Of_Residence_Supplied = item.Proof_Of_Residence_Supplied;
                clientDetailData.ProofOfRegistrationSupplied = item.Proof_Of_Registration_Supplied;
                clientDetailData.DateClientLoaded = item.Date_Client_Loaded.ToDateTime();
                clientDetailData.DateClientVerified = item.Date_Client_Verified.ToDateTime();
                clientDetailData.IsStaffAccount = item.Is_Staff_Account;
                clientDetailData.CanClearingMemberChangeMarginMultiplier = item.CanClearingMemberChangeMarginMultiplier;
                clientDetailData.IsBeneficialInterestAccount = item.IsBeneficialInterestAccount;
                clientDetailData.StrateClientCode = HelperMethods.ParsePascal(item.Strate_Client_Code);
                clientDetailData.SettlementAgentStrateCode = HelperMethods.ParsePascal(item.Settlement_Agent_Strate_Code);
                clientDetailData.FundsAccountNumber = HelperMethods.ParsePascal(item.Funds_Account_Number);
                clientDetailData.ScripAccountNumber = HelperMethods.ParsePascal(item.Scrip_Account_Number);
                clientDetailData.FundsAccountBranchCode = HelperMethods.ParsePascal(item.Funds_Account_Branch_Code);
                clientDetailData.ScripAccountBranchCode = HelperMethods.ParsePascal(item.Scrip_Account_Branch_Code);
                clientDetailData.IndustryCode = HelperMethods.ParsePascal(item.Client_Code);
                clientDetailData.TradingRole = HelperMethods.ParsePascal(item.Client_Code);
                clientDetailData.BDAAccountNumber = HelperMethods.ParsePascal(item.Client_Code);
                clientDetailData.IsProfessional = item.IsProfessional;
                clientDetailData.IsShariah = item.IsShariah;
                clientDetailData.MemberCode = item.MemberCode;

                clientInformationList.Add(clientDetailData);

            }
            return clientInformationList;
        }

        /// <summary>Displays the data parse.</summary>
        /// <param name="displaydata">The displaydata.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<MarketDisplayInformation> DataDownloadDisplayData(List<DisplayStructure> displaydata)
        {

            List<MarketDisplayInformation> marketDisplayInformationList = new List<MarketDisplayInformation>();


            foreach (var item in displaydata)
            {

                MarketDisplayInformation marketDisplayInformation = new MarketDisplayInformation();
                marketDisplayInformation.InstrumentId = item.IdInstrument;
                marketDisplayInformation.OpeningPrice = item.OpeningPrice;
                //  marketDisplayInformation.CallOrPut = property.Contract.CallPut.ToString();
                marketDisplayInformation.FirstExpiryDate = item.Contract.ExpiryDate.ToDateTime();//.CompareTo(Convert.ToDateTime("1/1/0001 12:00:00 AM")) == 0 ? new DateTime(1753, 1, 1) : property.Contract.ExpiryDate.ToDateTime();
                marketDisplayInformation.IdentifierPrefix = item.Contract.IdentifierPrefix.ToString();
                marketDisplayInformation.FirstInstrumentContractName = HelperMethods.ParsePascal(item.Contract.InstrumentName).Trim();
                marketDisplayInformation.IsDeltaOption = item.Contract.IsDeltaOption;
                marketDisplayInformation.FirstInstrumentCode = InstrumentData != null ? GetInstrumentCodeByContractName(item.Contract.GetInstrumentName()) : "";
                marketDisplayInformation.SecondaryInstrumentCode = InstrumentData != null ? GetInstrumentCodeByContractName(item.Contract.GetInstrumentName()) : "";

                marketDisplayInformation.SecondaryExpiryDate = item.Contract.SecondaryExpiryDate.ToDateTime();//CompareTo(Convert.ToDateTime("1/1/0001 12:00:00 AM")) == 0 ? new DateTime(1753, 1, 1) : property.Contract.SecondaryExpiryDate.ToDateTime();
                marketDisplayInformation.SecondaryInstrumentContractName = HelperMethods.ParsePascal(item.Contract.SecondaryInstrumentName).Trim();
                marketDisplayInformation.Strike = item.Contract.Strike;
                marketDisplayInformationList.Add(marketDisplayInformation);
            }


            return marketDisplayInformationList;

        }



        /// <summary>Contracts the date parse.</summary>
        /// <param name="contractDates">The contract dates.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<ContractsDateData> DataDownloadContractDateData(List<ContractDatesStructure> contractDates)
        {


            List<ContractsDateData> contractDataList = new List<ContractsDateData>();

            foreach (var item in contractDates)
            {
                ContractsDateData contractsDateData = new ContractsDateData();
                contractsDateData.InstrumentId = item.IdInstrument;
                contractsDateData.ContractDateId = item.IdContractDate;
                // contractsDateData.IdTradingSession = contractDate.;
                contractsDateData.ExpiryDate = item.ExpiryDate.ToDateTime();
                contractsDateData.ValuationDate = item.ValuationDate.ToDateTime();
                contractsDateData.Nominal = item.Nominal;
                contractsDateData.StrikeInterval = item.StrikeInterval;
                contractsDateData.StrikeIntervalOffScreen = item.StrikeIntervalOffScreen;
                contractsDateData.Spread = item.Spread;
                contractsDateData.LotSize = item.LotSize;
                contractsDateData.OptionLotSize = item.OptionLotSize;
                contractsDateData.MaxDepth = item.MaxDepth;
                contractsDateData.PriceOrRate = item.PriceOrRate;
                contractsDateData.MaxChange = item.MaxChange;
                contractsDateData.MaxDayMove = item.MaxDayMove;
                //contractsDateData.MaxSpreadDifferential = contractDate.MaxSpreadDifferential;
                contractsDateData.AONAllowedOnSpotSiloCertificate = item.AONAllowedOnSpotSiloCertificate;
                contractsDateData.OptionsAllowed = item.OptionsAllowed;
                contractsDateData.DeltasAllowed = item.DeltasAllowed;
                contractsDateData.SpreadsAllowed = item.SpreadsAllowed;
                contractsDateData.InitialMargin = item.InitialMargin;
                // contractsDateData.QuoteFormatDecimalPlaces = contractDate.QuoteFormatDecimalPlaces;
                contractsDateData.PriceFormatDecimalPlaces = item.PriceFormatDecimalPlaces;
                //contractsDateData.OptionPremiumFormatDecimalPlaces = contractDate.OptionPremiumFormatDecimalPlaces;
                contractsDateData.PriceMultiplier = item.PriceMultiplier;
                contractsDateData.ClearDate = item.ClearDate.ToDateTime();
                contractsDateData.VSR = item.VSR;
                contractsDateData.RPVE = item.RPVE;
                contractsDateData.VolatilityRoundPlaces = item.VolatilityRoundPlaces;
                contractsDateData.OptionsTradableOnScreen = item.OptionsTradableOnScreen;
                contractsDateData.OptionsTradableReportOnly = item.OptionsTradableReportOnly;
                contractsDateData.FuturesTradableOnScreen = item.FuturesTradableOnScreen;
                contractsDateData.FuturesTradableReportOnly = item.FuturesTradableReportOnly;
                contractsDateData.MinValidBidVolumeOnScreen = item.MinValidBidVolumeOnScreen;
                contractsDateData.MinValidBidVolumeOffScreen = item.MinValidBidVolumeOffScreen;
                contractsDateData.MinValidBidVolumeOnScreenOption = item.MinValidBidVolumeOnScreenOption;
                contractsDateData.MinValidBidVolumeOffScreenOption = item.MinValidBidVolumeOffScreenOption;
                contractsDateData.PriceInterval = item.PriceInterval;
                contractsDateData.AONAllowed = item.AONAllowed;
                contractsDateData.AtBestAllowed = item.AtBestAllowed;
                contractsDateData.StopOrderAllowed = item.StopOrderAllowed;

                contractsDateData.IceBergAllowed = item.IceBergAllowed;
                contractsDateData.HoldOverAllowed = item.HoldOverAllowed;
                contractsDateData.AtCloseAllowed = item.AtCloseAllowed;
                contractsDateData.IsFutureAnonymous = item.IsFutureAnonymous;
                contractsDateData.IsOptionAnonymous = item.IsOptionAnonymous;
                contractsDateData.IsSiloAuctionBidAnonymous = item.IsSiloAuctionBidAnonymous;
                contractsDateData.SiloAuctionPriceInterval = item.SiloAuctionPriceInterval;
                contractsDateData.BasisPointValue = item.BasisPointValue;
                contractsDateData.RFQAllowed = item.RFQAllowed;
                contractsDateData.QuantityTickSize = item.QuantityTickSize;
                contractsDateData.MaxGap = item.MaxGap;
                // contractsDateData.MinAONQty = contractDate.MinAONQty;


                contractDataList.Add(contractsDateData);
            }

            return contractDataList;
        }

        /// <summary>Completeds the order parse.</summary>
        /// <param name="completedOrderStructures">The completed order structures.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<CompletedOrdersData> DataDownloadCompletedOrderData(ConcurrentDictionary<int, CompletedOrderStructure> completedOrderStructures)
        {

            List<CompletedOrdersData> completedOrdersData = new List<CompletedOrdersData>();

            //    Cache.Update(Cache.concurrentDicInstrumentDataKeyInstrumentCode, InstrumentCode, instrumentContract, action);
            //   Cache.Update(Cache.concurrentDicInstrumentDataKeyInstrumentName, instrumentContract, InstrumentCode, action);




            foreach (var item in completedOrderStructures.Values)
            {



                CompletedOrdersData completed = new CompletedOrdersData();

                completed.AccountNumber = Cache.concurrentClientDataKeyClientCode.ContainsKey(HelperMethods.ParsePascal(item.Principle)) == false
              ? ""
              : Cache.concurrentClientDataKeyClientCode[HelperMethods.ParsePascal(item.Principle)];

                // completed.CounterPartyAccountNumber = Cache.concurrentClientDataKeyClientCode.ContainsKey(HelperMethods.ParsePascal(item.Counterparty))) == false
                // ? ""
                //: Cache.concurrentClientDataKeyClientCode[HelperMethods.ParsePascal(item.Counterparty))];


                completed.TradeDate = item.TradeDate.ToDateTime();
                completed.OrderId = item.IdOrder;
                completed.MatchDate = item.MatchDate.ToDateTime();
                completed.Member = HelperMethods.ParsePascal(item.Member);
                completed.Dealer = HelperMethods.ParsePascal(item.Dealer);
                completed.ClientCode = HelperMethods.ParsePascal(item.Principle);

                completed.InTime = DataConverter.ConvertFromDelphiTime(item.InTime).ToString();
                completed.ClearingMember = HelperMethods.ParsePascal(item.ClearingMember);
                completed.BuyOrSell = item.BuyOrSell.ToString();

                completed.State = (int)item.State == 0 ? "" : item.State.ToString();

                completed.Quantity = item.Quantity;
                completed.Rate = item.Rate;
                completed.OrderReference = HelperMethods.ParsePascal(item.OrderReference);
                completed.ExchangeSuffix = item.ExchangeSuffix;
                completed.OriginalQuantity = item.OriginalQuantity;
                completed.DealtRate = item.DealtRate;
                completed.DealtPrice = item.DealtPrice;
                completed.Consideration = item.Consideration;
                completed.SAFReference = HelperMethods.ParsePascal(item.SAFReference);
                completed.CarryRate = item.CarryRate;
                completed.AdditionalUserReference = HelperMethods.ParsePascal(item.AdditionalUserReference);
                completed.SettlementDate = item.SettlementDate.ToDateTime();

                completed.TradeTime = DataConverter.ConvertFromDelphiTime(item.TradeTime).ToString();
                completed.TradeLeg = HelperMethods.ParsePascal(item.TradeLeg);
                completed.MatchReference = HelperMethods.ParsePascal(item.MatchReference);
                completed.EqualOppositeUnex = HelperMethods.ParsePascal(item.EqualOppositeUnex);
                completed.IDBUnex = HelperMethods.ParsePascal(item.IDBUnex);
                completed.MatchTime = DataConverter.ConvertFromDelphiTime(item.MatchTime).ToString();

                completed.Counterparty = HelperMethods.ParsePascal(item.Counterparty);
                completed.SubAccount = HelperMethods.ParsePascal(item.SubAccount);
                completed.Price = item.Price;
                completed.BDAAccountNumber = HelperMethods.ParsePascal(item.BDAAccountNumber);
                completed.Script = item.Script;
                completed.Cancelled = item.Cancelled;


                // completed.InstrumentCode = InstrumentData != null ? GetInstrumentCodeByContractName(item.Contract.GetInstrumentName()) : "";

                completed.InstrumentCode = !Cache.concurrentDicInstrumentDataKeyInstrumentName.ContainsKey(item.Contract.GetInstrumentName()) ? "" : Cache.concurrentDicInstrumentDataKeyInstrumentName[item.Contract.GetInstrumentName()];

                completed.Origin = item.Origin.ToString();
                completed.Reason = item.Reason.ToString();
                completed.PrincipleAgency = item.PrincipleAgency.ToString();
                completed.SpotPrice = item.SpotPrice;


                completed.Hitter = item.Hitter;
                completed.BookingFeeFlag = ((int)item.BookingFeeFlag).ToString();
                completed.Delta = item.Delta;
                completed.CleanPrice = item.CleanPrice;
                completed.AccruedInterest = item.AccruedInterest;
                completed.SpotContractId = item.IdSpotContract;
                completed.SiloReceiptNumber = item.SiloReceiptNumber;




                completed.SiloLocationCode = HelperMethods.ParsePascal(item.SiloLocationCode);
                completed.GradeCode = HelperMethods.ParsePascal(item.GradeCode);
                completed.CountryOfOriginCode = HelperMethods.ParsePascal(item.CountryOfOriginCode);
                completed.BaseRateCode = HelperMethods.ParsePascal(item.BaseRateCode);

                completed.InterestSpread = item.InterestSpread;
                completed.ActiveOrderFilledId = item.IdActiveOrderFilled;



                completedOrdersData.Add(completed);
            }
            return completedOrdersData;
        }


        /// <summary>Clients the structure parse.</summary>
        /// <param name="_clientData">The client data.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<ClientData> DataDownloadClientData(ConcurrentDictionary<int, ClientStructure> _clientData)//<ClientStructure> _clientData)
        {
            List<ClientData> clientStructuresList = new List<ClientData>();

            foreach (var item in _clientData.Values)
            {
                ClientData clientData = new ClientData();
                clientData.ClientId = item.IdClient;
                clientData.MasterClientId = item.IdMasterClient;
                clientData.MemberId = item.IdMember;
                clientData.ClientCode = HelperMethods.ParsePascal(item.ClientCode);
                clientData.Description = HelperMethods.ParsePascal(item.Description);
                clientData.Verified = item.Verified;
                clientData.CountryId = item.IdCountry;
                clientData.MultiplicationFactor = item.MultiplicationFactor;
                clientData.AccountNumber = HelperMethods.ParsePascal(item.StrateCode);
                clientData.LastDateTraded = item.LastDateTraded.ToDateTime();
                clientData.IsProfessional = item.IsProfessional;
                clientData.IsShariah = item.IsShariah;
                clientData.AllowClientSubAccounts = item.AllowClientSubAccounts;
                clientData.PlaceOfSettlement = HelperMethods.ParsePascal(item.PlaceOfSettlement);

                clientStructuresList.Add(clientData);
            }
            return clientStructuresList;
        }



        /// <summary>Indiceses the data structure parse.</summary>
        /// <param name="indicesStructure">The indices structure.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        internal List<IndicesData> DataDownloadIndicesData(List<IndicesStructure> indicesStructure)
        {
            List<IndicesData> indicesStructureDataList = new List<IndicesData>();

            foreach (var item in indicesStructure)
            {
                IndicesData indicesData = new IndicesData();
                indicesData.Classification = HelperMethods.ParsePascal(item.Classification);
                indicesData.IndexId = item.IdIndices;
                indicesData.IndicesCode = HelperMethods.ParsePascal(item.IndicesDescription);
                indicesData.IndicesDescription = HelperMethods.ParsePascal(item.IndicesDescription);
                indicesStructureDataList.Add(indicesData);
            }

            return indicesStructureDataList;
        }
        /// <summary>Indexes the data structure parse.</summary>
        /// <param name="indexData">The index data.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        internal List<IndexHistoricalData> DataDownloadIndexData(List<IndexDataStructure> indexData)
        {
            List<IndexHistoricalData> indexDataStructureDataList = new List<IndexHistoricalData>();

            foreach (var item in indexData)
            {
                IndexHistoricalData indexHistoricalData = new IndexHistoricalData();
                indexHistoricalData.IndexDataId = item.IdIndexData;
                indexHistoricalData.IndexValue = item.IndexValue;
                indexHistoricalData.MarketCapitalization = item.MarketCapitalization;
                indexHistoricalData.TradeDate = item.TradeDate.ToDateTime();
                indexDataStructureDataList.Add(indexHistoricalData);
            }

            return indexDataStructureDataList;
        }

        /// <summary>Instruments the type data parse.</summary>
        /// <param name="InstrumentTypeData">The instrument type data.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        internal List<InstrumentTypeData> DataDownloadInstrumentTypeData(List<InstrumentTypeStructure> InstrumentTypeData)
        {
            List<InstrumentTypeData> instrumenttypeDataList = new List<InstrumentTypeData>();


            foreach (var item in InstrumentTypeData)
            {
                InstrumentTypeData _instrumentTypeData = new InstrumentTypeData();
                _instrumentTypeData.InstrumentTypeId = item.IdInstrumentType;
                _instrumentTypeData.TradingSessionId = item.IdTradingSession;
                _instrumentTypeData.InstrumentTypeCode = HelperMethods.ParsePascal(item.InstrumentTypeCode);
                _instrumentTypeData.InstrumentTypeName =
                    HelperMethods.ParsePascal(item.InstrumentTypeName);
                _instrumentTypeData.InstrumentTypeNumber = item.InstrumentTypeNumber;

                instrumenttypeDataList.Add(_instrumentTypeData);
            }

            return instrumenttypeDataList;
        }

        /// <summary>Dealers the data parse.</summary>
        /// <param name="dealerData">The dealer data.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        internal List<DealerData> DataDownloadDealerData(List<DealerStructure> dealerData)
        {
            List<DealerData> dealerDatalist = new List<DealerData>();

            foreach (var item in dealerData)
            {
                DealerData _dealerData = new DealerData();

                _dealerData.EmailAddress = HelperMethods.ParsePascal(item.EmailAddress);
                _dealerData.FaxNumber = HelperMethods.ParsePascal(item.FaxNumber);
                _dealerData.FullName = HelperMethods.ParsePascal(item.FullName);
                _dealerData.IDCode = HelperMethods.ParsePascal(item.IDCode);
                _dealerData.DealerId = item.IdDealer;
                _dealerData.MemberId = item.IdMember;
                _dealerData.IsMarketMaker = item.IsMarketMaker;
                _dealerData.TelephoneNumber = HelperMethods.ParsePascal(item.TelephoneNumber);

                dealerDatalist.Add(_dealerData);
            }
            return dealerDatalist;

        }

        /// <summary>Deals the data parse.</summary>
        /// <param name="dealsData">The deals data.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        internal List<DealsData> DataDownloadDealsData(List<DealStructure> dealsData)
        {
            List<DealsData> dealsDatalist = new List<DealsData>();

            foreach (var item in dealsData)
            {
                DealsData _dealsData = new DealsData();

                _dealsData.AdditionalUserReference = HelperMethods.ParsePascal(item.AdditionalUserReference);
                _dealsData.AllocationTime = DataConverter.ConvertFromDelphiTime(item.AllocationTime).ToString();
                _dealsData.BaseRateCode = HelperMethods.ParsePascal(item.BaseRateCode);
                _dealsData.BookingFeeFlag = item.BookingFeeFlag.ToString();
                _dealsData.BuyOrSell = item.BuyOrSell.ToString();
                _dealsData.ClearingMemberCode = HelperMethods.ParsePascal(item.ClearingMemberCode);
                _dealsData.Consideration = item.Consideration;

                _dealsData.AccountNumber = Cache.concurrentClientDataKeyClientCode.ContainsKey(HelperMethods.ParsePascal(item.PrincipalCode)) == false
             ? ""
             : Cache.concurrentClientDataKeyClientCode[HelperMethods.ParsePascal(item.PrincipalCode)];


                _dealsData.CounterPartyAccountNumber = Cache.concurrentClientDataKeyClientCode.ContainsKey(HelperMethods.ParsePascal(item.Counterparty)) == false
             ? ""
             : Cache.concurrentClientDataKeyClientCode[HelperMethods.ParsePascal(item.Counterparty)];


                _dealsData.Counterparty = HelperMethods.ParsePascal(item.Counterparty);

                _dealsData.CountryOfOriginCode = HelperMethods.ParsePascal(item.CountryOfOriginCode);
                _dealsData.DealPrice = item.DealPrice;

                _dealsData.DealType = item.DealType.ToString();

                _dealsData.DealerCode = HelperMethods.ParsePascal(item.DealerCode);

                _dealsData.Delta = item.Delta;

                _dealsData.EnteredTime = DataConverter.ConvertFromDelphiTime(item.EnteredTime).ToString();

                _dealsData.ExchangeSuffix = item.ExchangeSuffix;

                _dealsData.Fee = item.Fee;

                _dealsData.GradeCode = HelperMethods.ParsePascal(item.AdditionalUserReference);

                _dealsData.DealId = item.IdDeal;
                _dealsData.InterestSpread = item.InterestSpread;
                _dealsData.IsGuaranteed = item.IsGuaranteed;
                _dealsData.JSEReference = HelperMethods.ParsePascal(item.JSEReference);
                _dealsData.MakerQuantity = item.MakerQuantity;
                _dealsData.MarkToMarket = item.Mark_To_Market;
                _dealsData.MemberCode = HelperMethods.ParsePascal(item.MemberCode);
                _dealsData.OriginalQuantity = item.OriginalQuantity;
                _dealsData.PartialFill = item.PartialFill;


                _dealsData.PrincipalCode = HelperMethods.ParsePascal(item.PrincipalCode);
                _dealsData.PrincipleAgency = item.PrincipleAgency.ToString();
                _dealsData.Quantity = item.Quantity;
                _dealsData.Rate = item.Rate;
                _dealsData.Reason = item.Reason.ToString();
                _dealsData.ReportOnlyQuantity = item.ReportOnlyQuantity;
                _dealsData.SelfTraded = item.SelfTraded;

                _dealsData.SiloLocationCode = HelperMethods.ParsePascal(item.AdditionalUserReference);

                _dealsData.SiloReceiptNumber = item.SiloReceiptNumber;

                _dealsData.SubAccount = HelperMethods.ParsePascal(item.SubAccount);

                _dealsData.TradeDate = item.TradeDate.ToDateTime();

                _dealsData.TradeTime = DataConverter.ConvertFromDelphiTime(item.TradeTime).ToString();

                _dealsData.UserReference = HelperMethods.ParsePascal(item.UserReference);



                dealsDatalist.Add(_dealsData);
            }
            return dealsDatalist;
        }
        /// <summary>Indiceses the data structure parse.</summary>
        /// <param name="IndicePriceList">The indice price list.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        private List<IndicesDataClass> DataDownloadIndexPriceData(List<IndicesDataStructure> IndicePriceList)
        {
            List<IndicesDataClass> indicesDataItems = new List<IndicesDataClass>();
            foreach (var item in IndicePriceList)
            {
                IndicesDataClass indicesData = new IndicesDataClass();
                indicesData.IndexId = item.IdIndices;
                indicesData.IndexPrice = item.IndexPrice;
                indicesData.MarketCapitalization = item.MarketCapitalization;
                indicesData.OpeningPrice = item.OpeningPrice;
                indicesData.UpdateDate = item.UpdateDate.ToDateTime();
                indicesData.UpdateTime = DataConverter.ConvertFromDelphiTime(item.UpdateTime).ToString();
                indicesDataItems.Add(indicesData);

            }

            return indicesDataItems;
        }

        /// <summary>Indexes the constituent data parse.</summary>
        /// <param name="indexConstDataItems">The index constant data items.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        private List<IndexConstituentsData> DataDownloadIndexConstituentData(List<IndexConstituentsStructure> indexConstDataItems)
        {
            List<IndexConstituentsData> indexConstDatatems = new List<IndexConstituentsData>();
            foreach (var item in indexConstDataItems)
            {
                IndexConstituentsData indexConstData = new IndexConstituentsData();
                indexConstData.IndexId = item.IdIndex;
                indexConstData.IndexInstrumentId = item.IdIndexInstrument;
                indexConstData.InstrumentId = item.IdInstrument;

                indexConstDatatems.Add(indexConstData);

            }

            return indexConstDatatems;
        }

        /// <summary>Audits the active orders parse.</summary>
        /// <param name="auditActiveOrdersStructureItems">The audit active orders structure items.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<AuditActiveOrdersData> DataDownloadAuditActiveOrdersData(List<AuditActiveOrdersStructure> auditActiveOrdersStructureItems)
        {

            List<AuditActiveOrdersData> auditActiverOrderData = new List<AuditActiveOrdersData>();
            foreach (var item in auditActiveOrdersStructureItems)
            {
                AuditActiveOrdersData auditActiveOrdersDataItem = new AuditActiveOrdersData();
                auditActiveOrdersDataItem.ActionTaken = item.ActionTaken.ToString();
                auditActiveOrdersDataItem.ActionTime = DataConverter.ConvertFromDelphiTime(item.ActionTime).ToString();
                auditActiveOrdersDataItem.AdditionalReference =
                    HelperMethods.ParsePascal(item.AdditionalReference);
                auditActiveOrdersDataItem.BDAAccountNumber = HelperMethods.ParsePascal(item.BDAAccountNumber);
                auditActiveOrdersDataItem.BidType = item.BidType;
                auditActiveOrdersDataItem.BuyOrSell = item.BuyOrSell.ToString();
                auditActiveOrdersDataItem.ClearingMember = HelperMethods.ParsePascal(item.ClearingMember);
                auditActiveOrdersDataItem.CountryOfOriginCode = HelperMethods.ParsePascal(item.CountryOfOriginCode);
                auditActiveOrdersDataItem.Dealer = HelperMethods.ParsePascal(item.Dealer);
                auditActiveOrdersDataItem.GradeCode = HelperMethods.ParsePascal(item.GradeCode);
                auditActiveOrdersDataItem.HoldoverDate = item.HoldoverDate.ToDateTime();
                auditActiveOrdersDataItem.IcebergQuantity = item.IcebergQuantity;
                auditActiveOrdersDataItem.IdOrder = item.IdOrder;
                auditActiveOrdersDataItem.InTime = DataConverter.ConvertFromDelphiTime(item.InTime).ToString();
                auditActiveOrdersDataItem.InstrumentCode = !Cache.concurrentDicInstrumentDataKeyInstrumentName.ContainsKey(item.Contract.GetInstrumentName()) ? "" : Cache.concurrentDicInstrumentDataKeyInstrumentName[item.Contract.GetInstrumentName()];

                // auditActiveOrdersDataItem.InstrumentCode = InstrumentData != null ? GetInstrumentCodeByContractName(item.Contract.GetInstrumentName()) : "";


                auditActiveOrdersDataItem.Member = HelperMethods.ParsePascal(item.Member);

                auditActiveOrdersDataItem.MustFill = item.MustFill;
                auditActiveOrdersDataItem.OrderReference = HelperMethods.ParsePascal(item.OrderReference);
                auditActiveOrdersDataItem.Principle = HelperMethods.ParsePascal(item.Principle);
                auditActiveOrdersDataItem.AccountNumber = Cache.concurrentClientDataKeyClientCode.ContainsKey(HelperMethods.ParsePascal(item.Principle)) == false
             ? ""
             : Cache.concurrentClientDataKeyClientCode[HelperMethods.ParsePascal(item.Principle)];
                auditActiveOrdersDataItem.PrincipleAgency = item.PrincipleAgency.ToString();
                auditActiveOrdersDataItem.Quantity = item.Quantity;
                auditActiveOrdersDataItem.Quote = item.Quote;
                auditActiveOrdersDataItem.SiloLocationCode = HelperMethods.ParsePascal(item.SiloLocationCode);
                auditActiveOrdersDataItem.SiloReceiptNumber = item.SiloReceiptNumber;
                auditActiveOrdersDataItem.State = item.State.ToString();
                auditActiveOrdersDataItem.SubAccount = HelperMethods.ParsePascal(item.SubAccount);


            }

            return auditActiverOrderData;

        }

        private List<SharesInIssueData> DataDownloadSharesInIssueData(List<SharesInIssueStructure> share)
        {
            List<SharesInIssueData> sharesInIssueDataItems = new List<SharesInIssueData>();

            foreach (var item in share)
            {
                SharesInIssueData sharesInIssueData = new SharesInIssueData();
                sharesInIssueData.Balance = item.Balance;
                sharesInIssueData.CurrentValue = item.PreviousCurrentValue;
                sharesInIssueData.IdInstrument = item.IdInstrument;
                sharesInIssueData.IdSharesInIssue = item.IdSharesInIssue;
                sharesInIssueData.PreviousBalance = item.PreviousCurrentValue;
                sharesInIssueData.PreviousCurrentValue = item.PreviousCurrentValue;


            }
            return sharesInIssueDataItems;

        }

        /// <summary>Positions the data parse.</summary>
        /// <param name="positionData">The position data.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public List<PositionData> DataDownloadPositionData(List<PositionStructure> positionData)
        {
            List<PositionData> positionDataList = new List<PositionData>();

            foreach (var item in positionData)
            {
                PositionData _positionData = new PositionData();

                _positionData.BaseRateCode = HelperMethods.ParsePascal(item.BaseRateCode);
                _positionData.Bought = item.Bought;
                _positionData.ClearingMember = HelperMethods.ParsePascal(item.ClearingMember);
                _positionData.ClosingPosition = item.ClosingPosition;
                _positionData.CountryOfOriginCode = HelperMethods.ParsePascal(item.CountryOfOriginCode);
                _positionData.Dealer = HelperMethods.ParsePascal(item.Dealer);
                _positionData.Exposure = item.Exposure;

                _positionData.GradeCode = HelperMethods.ParsePascal(item.GradeCode);
                _positionData.PositionId = item.IdPosition;
                _positionData.InterestSpread = item.InterestSpread;
                _positionData.Member = HelperMethods.ParsePascal(item.Member);
                _positionData.PhysicalDeliveries = item.PhysicalDeliveries;
                _positionData.PhysicalPosition = item.PhysicalPosition;
                _positionData.PositionDate = item.PositionDate.ToDateTime();
                _positionData.Principle = HelperMethods.ParsePascal(item.Principle);

                _positionData.SiloLocationCode = HelperMethods.ParsePascal(item.SiloLocationCode);
                _positionData.Sold = item.Sold;
                _positionData.StartPosition = item.StartPosition;


                positionDataList.Add(_positionData);
            }
            return positionDataList;
        }

        #endregion

    }


}
